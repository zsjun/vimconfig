{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/breadcrumb/style\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport cls from 'classnames';\nimport Link from 'next/link';\nimport { useTranslations } from 'next-intl';\nimport { RightOutlined } from '@ant-design/icons';\nimport { KnowledgeProvider } from '@/providers/knowledge';\nimport { DoubleColumnLayout } from '@/layout/DoubleColumnLayout';\nimport { ListTrail } from '@/components/Animation/Trail';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport { KnowledgeList } from '@/components/KnowledgeList';\nimport style from './index.module.scss';\n\nconst Page = ({\n  pId,\n  book,\n  otherBooks = []\n}) => {\n  const t = useTranslations();\n  const chapters = book && book.children || [];\n  const start = useCallback(() => {\n    const chapter = chapters[0];\n    window.open(`/knowledge/${pId}/${chapter.id}`);\n  }, [pId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!book) {\n    return null;\n  }\n\n  const bg = `linear-gradient(to bottom, rgba(var(--rgb-bg-second), 0), rgba(var(--rgb-bg-second), 1)), url(${book.cover})`;\n  return __jsx(\"div\", {\n    className: style.wrapper\n  }, book.cover && __jsx(\"div\", {\n    className: style.bg,\n    style: {\n      backgroundImage: bg\n    }\n  }), __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: style.breadcrump\n  }, __jsx(_Breadcrumb, null, __jsx(_Breadcrumb.Item, null, __jsx(Link, {\n    href: \"/knowledge\"\n  }, __jsx(\"a\", null, t('knowledgeBooks')))), __jsx(_Breadcrumb.Item, null, book.title)))), __jsx(DoubleColumnLayout, {\n    minHeight: '0px',\n    background: 'none',\n    leftNode: __jsx(\"div\", {\n      className: style.content\n    }, __jsx(\"section\", {\n      className: cls(style.tocWrapper)\n    }, __jsx(\"header\", null, book.title), __jsx(\"main\", {\n      className: style.bgMain\n    }, __jsx(\"section\", {\n      className: style.desc\n    }, book.cover && __jsx(\"div\", {\n      className: style.coverWrapper\n    }, __jsx(\"img\", {\n      src: book.cover,\n      alt: \"cover\"\n    })), __jsx(\"div\", {\n      className: style.infoWrapper\n    }, __jsx(\"div\", null, __jsx(\"p\", {\n      className: style.title\n    }, book.title), __jsx(\"p\", {\n      className: style.desc\n    }, book.summary), __jsx(\"p\", {\n      className: style.meta\n    }, __jsx(\"span\", null, book.views, \" \", t('readingCount')), __jsx(\"span\", {\n      className: style.seperator\n    }, \"\\xB7\"), __jsx(\"span\", {\n      className: style.pullRight\n    }, __jsx(LocaleTime, {\n      date: book.publishAt\n    }))), __jsx(\"div\", {\n      className: style.btnWrap\n    }, __jsx(_Button, {\n      type: \"primary\",\n      onClick: start,\n      disabled: !chapters.length\n    }, t('startReading')))))), chapters.length ? __jsx(\"ul\", null, __jsx(ListTrail, {\n      length: chapters.length,\n      options: {\n        opacity: 1,\n        height: 44,\n        from: {\n          opacity: 0,\n          height: 0\n        }\n      },\n      renderItem: idx => {\n        const chapter = chapters[idx];\n        return __jsx(Link, {\n          as: `/knowledge/${pId}/${chapter.id}`,\n          href: `/knowledge/[pId]/[id]`\n        }, __jsx(\"a\", null, __jsx(\"span\", null, chapter.title), __jsx(\"span\", null, __jsx(LocaleTime, {\n          date: chapter.createAt\n        }), __jsx(RightOutlined, null))));\n      }\n    })) : __jsx(\"div\", {\n      className: 'empty'\n    }, t('pleaseWait'))))),\n    rightNode: __jsx(\"div\", {\n      className: cls('sticky', style.tocWrapper)\n    }, __jsx(\"header\", null, t('otherKnowledges')), __jsx(\"main\", null, __jsx(KnowledgeList, {\n      knowledges: otherBooks\n    }))),\n    isRightNodeMobileHidden: false\n  }));\n};\n\nPage.getInitialProps = async ctx => {\n  const pId = ctx.query.pId;\n  const [book, [allBooks]] = await Promise.all([KnowledgeProvider.getKnowledge(pId), KnowledgeProvider.getKnowledges({\n    page: 1,\n    pageSize: 6,\n    status: 'publish'\n  })]);\n  return {\n    pId,\n    book,\n    otherBooks: allBooks.filter(b => b.id !== book.id)\n  };\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}