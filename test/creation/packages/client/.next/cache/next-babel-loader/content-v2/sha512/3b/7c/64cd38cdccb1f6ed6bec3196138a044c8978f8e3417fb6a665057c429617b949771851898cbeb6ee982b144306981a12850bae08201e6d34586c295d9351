{"ast":null,"code":"import _extends from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { elementInViewport } from '@/utils';\nexport var Spring = function Spring(_ref) {\n  var _ref$containerProps = _ref.containerProps,\n      containerProps = _ref$containerProps === void 0 ? {} : _ref$containerProps,\n      _ref$from = _ref.from,\n      from = _ref$from === void 0 ? {} : _ref$from,\n      _ref$to = _ref.to,\n      to = _ref$to === void 0 ? {} : _ref$to,\n      children = _ref.children;\n  var ref = useRef();\n\n  var _useSpring = useSpring(function () {\n    return _objectSpread(_objectSpread({}, from), {}, {\n      config: {\n        mass: 10,\n        tension: 400,\n        friction: 40,\n        precision: 0.00001,\n        clamp: true\n      }\n    });\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      styles = _useSpring2[0],\n      animation = _useSpring2[1];\n\n  var onViewportChange = useCallback(function (visible) {\n    if (visible) {\n      animation.start(to);\n    }\n  }, [animation, to]);\n  useEffect(function () {\n    if (elementInViewport(ref.current)) {\n      animation.start(to);\n    }\n  }, [animation, to]);\n  return __jsx(VisibilitySensor, {\n    onChange: onViewportChange\n  }, __jsx(animated.div, _extends({}, containerProps, {\n    ref: ref,\n    style: styles\n  }), children));\n};","map":null,"metadata":{},"sourceType":"module"}