{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback, useEffect, useContext } from 'react';\nimport cls from 'classnames';\nimport Link from 'next/link';\nimport { useTranslations } from 'next-intl';\nimport { useRouter } from 'next/router';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { GlobalContext } from '@/context/global';\nimport { DoubleColumnLayout } from '@/layout/DoubleColumnLayout';\nimport { ArticleProvider } from '@/providers/article';\nimport { ArticleList } from '@components/ArticleList';\nimport { ArticleCarousel } from '@components/ArticleCarousel';\nimport { ArticleRecommend } from '@/components/ArticleRecommend';\nimport { Tags } from '@components/Tags';\nimport { Footer } from '@components/Footer';\nimport style from './index.module.scss';\nconst pageSize = 12;\nexport const CategoryMenu = ({\n  categories\n}) => {\n  const t = useTranslations();\n  const router = useRouter();\n  const {\n    asPath\n  } = router;\n  return __jsx(React.Fragment, null, [{\n    label: t('all'),\n    path: '/'\n  }, ...categories].map((category, index) => __jsx(Link, _extends({\n    key: index\n  }, index === 0 ? {\n    href: '/'\n  } : {\n    href: '/category/[category]',\n    as: `/category/` + category.value\n  }, {\n    shallow: false\n  }), __jsx(\"a\", {\n    className: cls({\n      [style.active]: index === 0 ? asPath === category.path : asPath.replace('/category/', '') === category.value\n    })\n  }, __jsx(\"span\", null, category.label)))));\n};\n\nconst Home = ({\n  articles: defaultArticles = [],\n  recommendedArticles = [],\n  total = 0\n}) => {\n  const t = useTranslations();\n  const {\n    setting,\n    tags,\n    categories\n  } = useContext(GlobalContext);\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(defaultArticles);\n  useEffect(() => {\n    setArticles(defaultArticles);\n  }, [defaultArticles]);\n  const getArticles = useCallback(page => {\n    ArticleProvider.getArticles({\n      page,\n      pageSize,\n      status: 'publish'\n    }).then(res => {\n      setPage(page);\n      setArticles(articles => [...articles, ...res[0]]);\n    });\n  }, []);\n  return __jsx(\"div\", {\n    className: style.wrapper\n  }, __jsx(DoubleColumnLayout, {\n    leftNode: __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: style.crouselWrap\n    }, __jsx(ArticleCarousel, {\n      articles: recommendedArticles\n    })), __jsx(\"div\", {\n      className: style.leftWrap\n    }, __jsx(\"header\", null, __jsx(CategoryMenu, {\n      categories: categories\n    })), __jsx(\"main\", null, __jsx(InfiniteScroll, {\n      pageStart: 1,\n      loadMore: getArticles,\n      hasMore: page * pageSize < total,\n      loader: __jsx(\"div\", {\n        className: 'loading',\n        key: 0\n      }, t('gettingArticle'))\n    }, __jsx(ArticleList, {\n      articles: articles\n    }))))),\n    rightNode: __jsx(\"div\", {\n      className: \"sticky\"\n    }, __jsx(ArticleRecommend, {\n      mode: \"inline\"\n    }), __jsx(Tags, {\n      tags: tags\n    }))\n  }), __jsx(Footer, {\n    setting: setting\n  }));\n}; // 服务端预取数据\n\n\nHome.getInitialProps = async () => {\n  const [articles, recommendedArticles] = await Promise.all([ArticleProvider.getArticles({\n    page: 1,\n    pageSize,\n    status: 'publish'\n  }), ArticleProvider.getAllRecommendArticles().catch(() => [])]);\n  return {\n    articles: articles[0],\n    total: articles[1],\n    recommendedArticles,\n    needLayoutFooter: false\n  };\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}