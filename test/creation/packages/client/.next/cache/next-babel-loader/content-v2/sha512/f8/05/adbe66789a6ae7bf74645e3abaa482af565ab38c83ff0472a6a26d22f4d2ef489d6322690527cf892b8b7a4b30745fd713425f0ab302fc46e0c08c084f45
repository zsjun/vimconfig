{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useContext } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslations } from 'next-intl';\nimport { GlobalContext } from '@/context/global';\nimport { PageProvider } from '@/providers/page';\nimport { ImageViewer } from '@/components/ImageViewer';\nimport { Comment } from '@/components/Comment';\nimport { MarkdownReader } from '@/components/MarkdownReader';\nimport style from './index.module.scss';\nimport { ArticleRecommend } from '@/components/ArticleRecommend';\n\nconst Page = ({\n  page\n}) => {\n  const t = useTranslations();\n  const {\n    setting\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    if (!page) {\n      return;\n    }\n\n    PageProvider.updatePageViews(page.id);\n  }, [page]);\n  return __jsx(React.Fragment, null, __jsx(ImageViewer, {\n    containerSelector: \"#js-page-wrapper\"\n  }, __jsx(\"div\", {\n    id: \"js-page-wrapper\",\n    className: style.container\n  }, __jsx(Helmet, null, __jsx(\"title\", null, page.name + ' | ' + setting.systemTitle)), __jsx(\"div\", {\n    className: \"container\"\n  }, page.cover && __jsx(\"div\", {\n    className: style.coverWrapper\n  }, __jsx(\"img\", {\n    src: page.cover,\n    alt: t('articleCover')\n  })), __jsx(\"div\", {\n    className: style.content\n  }, __jsx(MarkdownReader, {\n    content: page.html\n  }))), __jsx(\"div\", {\n    className: style.commentAndArticleWrapper\n  }, __jsx(\"div\", {\n    className: style.comments\n  }, __jsx(\"p\", {\n    className: style.title\n  }, t('comment')), __jsx(\"div\", {\n    className: style.commentContainer\n  }, __jsx(Comment, {\n    key: page.id,\n    hostId: page.id\n  }))), __jsx(\"div\", {\n    className: style.recmmendArticles\n  }, __jsx(\"p\", {\n    className: style.title\n  }, t('recommendToReading')), __jsx(\"div\", {\n    className: style.articleContainer\n  }, __jsx(ArticleRecommend, {\n    articleId: null,\n    needTitle: false\n  })))))));\n};\n\nPage.getInitialProps = async ctx => {\n  const {\n    id\n  } = ctx.query;\n  const page = await PageProvider.getPage(id);\n  return {\n    page\n  };\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}