{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport distanceInWords from 'date-fns/formatDistance';\nimport dateFormat from 'date-fns/format';\nimport zh from 'date-fns/locale/zh-CN';\nvar callbacks = [];\nsetInterval(function () {\n  callbacks.forEach(function (cb) {\n    return cb();\n  });\n}, 1000 * 60);\n\nfunction eachMinute(fn) {\n  callbacks.push(fn);\n  return function () {\n    callbacks = callbacks.filter(function (cb) {\n      return cb !== fn;\n    });\n  };\n}\n\nvar getTimeago = function getTimeago(date) {\n  var content = distanceInWords(new Date(date), new Date(), {\n    addSuffix: true,\n    locale: zh\n  });\n  content = content.replace('about', '').replace('less than a minute ago', 'just now').replace('minute', 'min');\n  return content;\n};\n\nexport var LocaleTime = function LocaleTime(_ref) {\n  var date = _ref.date,\n      timeago = _ref.timeago,\n      _ref$format = _ref.format,\n      format = _ref$format === void 0 ? 'yyyy-MM-dd HH:mm:ss' : _ref$format;\n\n  var _useState = useState(0),\n      _ = _useState[0],\n      setMinutesMounted = _useState[1]; // eslint-disable-line no-unused-vars\n\n\n  var callback = useRef();\n  useEffect(function () {\n    callback.current = eachMinute(function () {\n      setMinutesMounted(function (state) {\n        return ++state;\n      });\n    });\n    return function () {\n      if (callback.current) {\n        callback.current();\n      }\n    };\n  }, []);\n  var formated = dateFormat(new Date(date), format);\n  return __jsx(\"time\", {\n    dateTime: formated\n  }, timeago ? getTimeago(date) : formated);\n};","map":null,"metadata":{},"sourceType":"module"}