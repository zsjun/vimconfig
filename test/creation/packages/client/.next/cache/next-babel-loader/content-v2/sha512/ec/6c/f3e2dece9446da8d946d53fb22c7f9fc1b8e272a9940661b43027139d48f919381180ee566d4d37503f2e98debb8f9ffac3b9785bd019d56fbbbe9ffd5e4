{"ast":null,"code":"import \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport _defineProperty from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useMemo } from 'react';\nimport cls from 'classnames';\nimport { useTranslations } from 'next-intl';\nimport { MessageOutlined } from '@ant-design/icons';\nimport { ConditionTransition } from '@/components/Animation/Transition';\nimport { Opacity } from '@/components/Animation/Opacity';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport { getRandomColor } from '@/utils';\nimport { useToggle } from '@/hooks/useToggle';\nimport { CommentEditor } from '../CommentEditor';\nimport styles from './index.module.scss';\nexport function CommentItem(_ref) {\n  var _cls;\n\n  var comment = _ref.comment,\n      parentComment = _ref.parentComment,\n      _ref$isChild = _ref.isChild,\n      isChild = _ref$isChild === void 0 ? false : _ref$isChild;\n  var t = useTranslations('commentNamespace');\n\n  var _useToggle = useToggle(false),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      editorVisible = _useToggle2[0],\n      toggleEditorVisible = _useToggle2[1];\n\n  var avatarSize = useMemo(function () {\n    return isChild ? 24 : 32;\n  }, [isChild]);\n  var paddingHorizontal = useMemo(function () {\n    return avatarSize + 8;\n  }, [avatarSize]);\n  return __jsx(\"div\", {\n    className: cls((_cls = {}, _defineProperty(_cls, styles.commentItem, true), _defineProperty(_cls, styles.isParent, !isChild), _defineProperty(_cls, styles.isChild, isChild), _cls))\n  }, __jsx(\"header\", null, __jsx(_Avatar, {\n    size: avatarSize,\n    style: {\n      backgroundColor: getRandomColor(comment.name)\n    }\n  }, ('' + comment.name).charAt(0).toUpperCase()), __jsx(\"span\", {\n    className: styles.name\n  }, __jsx(\"strong\", null, comment.name), comment.replyUserName ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    style: {\n      margin: '0 8px'\n    }\n  }, t('reply')), __jsx(\"strong\", {\n    className: styles.replyUser\n  }, comment.replyUserName)) : null)), __jsx(\"main\", {\n    style: {\n      padding: \"12px 0 12px \".concat(paddingHorizontal, \"px\")\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: comment.html || comment.content\n    }\n  })), __jsx(\"footer\", {\n    style: {\n      paddingLeft: \"\".concat(paddingHorizontal, \"px\")\n    }\n  }, __jsx(\"div\", {\n    className: styles.meta\n  }, comment.userAgent ? __jsx(\"span\", null, comment.userAgent, ' Â· ') : null, __jsx(LocaleTime, {\n    date: comment.createAt,\n    timeago: true\n  }), __jsx(\"span\", {\n    className: styles.reply,\n    onClick: toggleEditorVisible\n  }, __jsx(MessageOutlined, {\n    style: {\n      marginRight: 4\n    }\n  }), t('reply'))), __jsx(ConditionTransition, {\n    visible: editorVisible,\n    options: {\n      from: {\n        opacity: 0,\n        height: 0\n      },\n      enter: {\n        opacity: 1,\n        height: 155\n      },\n      leave: {\n        opacity: 0,\n        height: 0\n      }\n    }\n  }, __jsx(\"div\", {\n    className: styles.editorWrapper\n  }, __jsx(CommentEditor, {\n    small: true,\n    hostId: comment.hostId,\n    parentComment: parentComment,\n    replyComment: comment,\n    onOk: toggleEditorVisible,\n    onClose: toggleEditorVisible\n  }))), comment.children && __jsx(\"div\", null, __jsx(Comments, {\n    comments: comment.children,\n    parentComment: comment,\n    isChild: true\n  }))));\n}\nexport function Comments(_ref2) {\n  var comments = _ref2.comments,\n      _ref2$parentComment = _ref2.parentComment,\n      parentComment = _ref2$parentComment === void 0 ? null : _ref2$parentComment,\n      _ref2$isChild = _ref2.isChild,\n      isChild = _ref2$isChild === void 0 ? false : _ref2$isChild;\n  return __jsx(React.Fragment, null, comments.map(function (comment) {\n    var component = __jsx(CommentItem, {\n      comment: comment,\n      parentComment: parentComment || comment,\n      isChild: isChild\n    });\n\n    return isChild ? __jsx(Opacity, null, component) : component;\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}