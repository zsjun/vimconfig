{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { httpProvider } from './http';\nexport var SettingProvider = /*#__PURE__*/function () {\n  function SettingProvider() {\n    _classCallCheck(this, SettingProvider);\n  }\n\n  _createClass(SettingProvider, null, [{\n    key: \"getSetting\",\n\n    /**\n     * 获取设置\n     */\n    value: function () {\n      var _getSetting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", httpProvider.post('/setting/get'));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getSetting() {\n        return _getSetting.apply(this, arguments);\n      }\n\n      return getSetting;\n    }()\n    /**\n     * 更新设置\n     */\n\n  }, {\n    key: \"updateSetting\",\n    value: function () {\n      var _updateSetting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", httpProvider.post(\"/setting\", data));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateSetting(_x) {\n        return _updateSetting.apply(this, arguments);\n      }\n\n      return updateSetting;\n    }()\n  }]);\n\n  return SettingProvider;\n}();","map":null,"metadata":{},"sourceType":"module"}