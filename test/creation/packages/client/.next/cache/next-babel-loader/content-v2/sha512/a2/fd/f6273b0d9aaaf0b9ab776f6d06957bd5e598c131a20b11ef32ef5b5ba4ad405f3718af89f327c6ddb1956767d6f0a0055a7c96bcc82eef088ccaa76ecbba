{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useContext } from 'react';\nimport { useTranslations } from 'next-intl';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { ArticleProvider } from '@/providers/article';\nimport { TagProvider } from '@/providers/tag';\nimport { GlobalContext } from '@/context/global';\nimport { DoubleColumnLayout } from '@/layout/DoubleColumnLayout';\nimport { Footer } from '@components/Footer';\nimport { ArticleList } from '@components/ArticleList';\nimport { ArticleRecommend } from '@/components/ArticleRecommend';\nimport { Categories } from '@components/Categories';\nimport { Tags } from '@components/Tags';\nimport style from '../index.module.scss';\nconst pageSize = 12;\n\nconst Home = ({\n  articles: defaultArticles = [],\n  total,\n  tag\n}) => {\n  const t = useTranslations();\n  const {\n    setting,\n    tags,\n    categories\n  } = useContext(GlobalContext);\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(defaultArticles);\n  useEffect(() => {\n    setArticles(defaultArticles);\n  }, [defaultArticles]);\n  const getArticles = useCallback(page => {\n    ArticleProvider.getArticlesByTag(tag.value, {\n      page,\n      pageSize,\n      status: 'publish'\n    }).then(res => {\n      setPage(page);\n      setArticles(articles => [...articles, ...res[0]]);\n    });\n  }, [tag.value]);\n  return __jsx(\"div\", {\n    className: style.wrapper\n  }, __jsx(DoubleColumnLayout, {\n    leftNode: __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: style.tagOrCategoryDetail\n    }, __jsx(\"p\", null, t('yu'), \" \", __jsx(\"span\", null, tag.label), \" \", t('tagRelativeArticles')), __jsx(\"p\", null, t('totalSearch'), \" \", __jsx(\"span\", null, total), \" \", t('piece'))), __jsx(Tags, {\n      tags: tags\n    }), __jsx(\"div\", {\n      className: style.leftWrap\n    }, __jsx(\"main\", null, __jsx(InfiniteScroll, {\n      pageStart: 1,\n      loadMore: getArticles,\n      hasMore: page * pageSize < total,\n      loader: __jsx(\"div\", {\n        className: 'loading',\n        key: 0\n      }, t('gettingArticle'))\n    }, __jsx(ArticleList, {\n      articles: articles\n    }))))),\n    rightNode: __jsx(\"div\", {\n      className: \"sticky\"\n    }, __jsx(ArticleRecommend, {\n      mode: \"inline\"\n    }), __jsx(Categories, {\n      categories: categories\n    }))\n  }), __jsx(Footer, {\n    setting: setting\n  }));\n}; // 服务端预取数据\n\n\nHome.getInitialProps = async ctx => {\n  const {\n    tag: tagValue\n  } = ctx.query;\n  const [articles, tag] = await Promise.all([ArticleProvider.getArticlesByTag(tagValue, {\n    page: 1,\n    pageSize,\n    status: 'publish'\n  }), TagProvider.getTagById(tagValue)]);\n  return {\n    articles: articles[0],\n    total: articles[1],\n    tag: tag,\n    needLayoutFooter: false\n  };\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}