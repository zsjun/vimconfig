{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { elementInViewport } from '@/utils';\nexport const Spring = ({\n  containerProps = {},\n  from = {},\n  to = {},\n  children\n}) => {\n  const ref = useRef();\n  const [styles, animation] = useSpring(() => _objectSpread(_objectSpread({}, from), {}, {\n    config: {\n      mass: 10,\n      tension: 400,\n      friction: 40,\n      precision: 0.00001,\n      clamp: true\n    }\n  }));\n  const onViewportChange = useCallback(visible => {\n    if (visible) {\n      animation.start(to);\n    }\n  }, [animation, to]);\n  useEffect(() => {\n    if (elementInViewport(ref.current)) {\n      animation.start(to);\n    }\n  }, [animation, to]);\n  return __jsx(VisibilitySensor, {\n    onChange: onViewportChange\n  }, __jsx(animated.div, _extends({}, containerProps, {\n    ref: ref,\n    style: styles\n  }), children));\n};","map":null,"metadata":{},"sourceType":"module"}