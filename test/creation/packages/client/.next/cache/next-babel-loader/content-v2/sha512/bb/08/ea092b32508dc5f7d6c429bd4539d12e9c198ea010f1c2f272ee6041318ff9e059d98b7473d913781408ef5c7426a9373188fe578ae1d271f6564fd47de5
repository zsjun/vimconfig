{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback, useContext, useRef } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { default as Router } from 'next/router';\nimport Link from 'next/link';\nimport { useTranslations } from 'next-intl';\nimport { TagOutlined } from '@ant-design/icons';\nimport { GlobalContext } from '@/context/global';\nimport { DoubleColumnLayout } from '@/layout/DoubleColumnLayout';\nimport { ArticleProvider } from '@/providers/article';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport { ImageViewer } from '@/components/ImageViewer';\nimport { Comment } from '@/components/Comment';\nimport { ArticleRecommend } from '@/components/ArticleRecommend';\nimport { MarkdownReader } from '@/components/MarkdownReader';\nimport { Toc } from '@/components/Toc';\nimport style from './index.module.scss';\n\nconst url = require('url');\n\nconst Article = ({\n  article\n}) => {\n  const t = useTranslations();\n  const {\n    setting\n  } = useContext(GlobalContext);\n  const passwdRef = useRef(null);\n  const {\n    0: shouldCheckPassWord,\n    1: setShouldCheckPassword\n  } = useState(article && article.needPassword);\n  const {\n    0: shouldCheckPay,\n    1: setShouldCheckPay\n  } = useState(article && article.totalAmount && !article.isPay); // const [shouldCheckPay, setShouldCheckPay] = useState(true);\n\n  const tocs = article && article.toc ? JSON.parse(article.toc) : []; // 检查文章密码\n\n  const checkPassWord = useCallback(() => {\n    ArticleProvider.checkPassword(article.id, passwdRef.current).then(res => {\n      if (res.pass) {\n        Object.assign(article, res);\n        setShouldCheckPassword(false);\n      } else {\n        _message.error(t('wrongPasswd'));\n\n        setShouldCheckPassword(true);\n      }\n    });\n  }, [t, article]); // 发起支付\n\n  const back = useCallback(() => {\n    Router.push('/');\n  }, []);\n\n  const checkPassWordModal = __jsx(_Modal, {\n    title: t('protectedArticleMsg'),\n    cancelText: t('backHome'),\n    okText: t('confirm'),\n    visible: shouldCheckPassWord,\n    onOk: checkPassWord,\n    onCancel: back\n  }, __jsx(_Form.Item, {\n    label: t('passwd')\n  }, __jsx(_Input.Password, {\n    onChange: e => {\n      passwdRef.current = e.target.value;\n    }\n  })));\n\n  useEffect(() => {\n    setShouldCheckPassword(article && article.needPassword);\n  }, [article]); // 更新阅读量\n\n  useEffect(() => {\n    if (!shouldCheckPassWord) {\n      ArticleProvider.updateArticleViews(article.id);\n    }\n  }, [shouldCheckPassWord, article]);\n\n  const Content = __jsx(React.Fragment, null, checkPassWordModal, __jsx(Helmet, null, __jsx(\"title\", null, (article.title || t('unknownTitle')) + ' | ' + setting.systemTitle)), __jsx(ImageViewer, {\n    containerSelector: \"#js-article-wrapper\"\n  }, __jsx(\"article\", {\n    id: \"js-article-wrapper\",\n    className: style.articleWrap\n  }, setting.systemUrl && __jsx(\"meta\", {\n    itemProp: \"url\",\n    content: url.resolve(setting.systemUrl, `/article/${article.id}`)\n  }), __jsx(\"meta\", {\n    itemProp: \"headline\",\n    content: article.title\n  }), article.tags && __jsx(\"meta\", {\n    itemProp: \"keywords\",\n    content: article.tags.map(tag => tag.label).join(' ')\n  }), __jsx(\"meta\", {\n    itemProp: \"dataPublished\",\n    content: article.publishAt\n  }), article.cover && __jsx(\"meta\", {\n    itemProp: \"image\",\n    content: article.cover\n  }), article.cover && __jsx(\"div\", {\n    className: style.coverWrapper\n  }, __jsx(\"img\", {\n    src: article.cover,\n    alt: t('articleCover')\n  })), __jsx(\"div\", {\n    className: style.metaInfoWrap\n  }, __jsx(\"h1\", {\n    className: style.title\n  }, article.title), __jsx(\"p\", {\n    className: style.desc\n  }, __jsx(\"span\", null, t('publishAt'), __jsx(LocaleTime, {\n    date: article.publishAt\n  })), __jsx(\"span\", null, \" \\u2022 \"), __jsx(\"span\", null, t('readings'), \" \", article.views))), __jsx(MarkdownReader, {\n    content: article.html\n  }), __jsx(\"div\", {\n    className: style.footerInfoWrap\n  }, __jsx(\"div\", {\n    className: style.copyrightInfo\n  }, t('publishAt'), __jsx(LocaleTime, {\n    date: article.publishAt\n  }), \" | \", t('copyrightInfo'), \"\\uFF1A\", __jsx(\"a\", {\n    href: \"https://creativecommons.org/licenses/by-nc/3.0/cn/deed.zh\",\n    target: \"_blank\",\n    rel: \"noreferrer\"\n  }, t('copyrightContent'))), article.tags && article.tags.length ? __jsx(\"div\", {\n    className: style.tagsWrap\n  }, article.tags.map(tag => {\n    return __jsx(\"div\", {\n      className: style.tagWrapper,\n      key: tag.id\n    }, __jsx(\"div\", {\n      className: style.tag\n    }, __jsx(Link, {\n      href: '/tag/[tag]',\n      as: '/tag/' + tag.value,\n      scroll: false\n    }, __jsx(\"a\", null, __jsx(TagOutlined, null), __jsx(\"span\", null, tag.label)))));\n  })) : null)), article.isCommentable && __jsx(\"div\", {\n    className: style.commentWrap\n  }, __jsx(\"p\", {\n    className: style.title\n  }, t('comment')), __jsx(Comment, {\n    key: article.id,\n    hostId: article.id\n  }))));\n\n  const Aside = __jsx(\"div\", {\n    className: 'sticky'\n  }, __jsx(ArticleRecommend, {\n    articleId: article.id,\n    mode: \"inline\"\n  }), tocs && tocs.length ? __jsx(Toc, {\n    key: article.id,\n    tocs: tocs,\n    maxHeight: '80vh'\n  }) : null);\n\n  return __jsx(DoubleColumnLayout, {\n    leftNode: Content,\n    rightNode: Aside,\n    likesProps: {\n      defaultCount: article.likes,\n      id: article.id,\n      api: (id, type) => ArticleProvider.updateArticleLikes(id, type).then(res => res.likes)\n    },\n    showComment: article.isCommentable,\n    shareProps: shouldCheckPassWord ? null : {\n      cover: article.cover,\n      title: article.title,\n      desc: article.summary,\n      url: `/article/${article.id}`\n    },\n    showPay: shouldCheckPay ? {\n      id: article.id,\n      totalAmount: article.totalAmount\n    } : null\n  });\n};\n\nArticle.getInitialProps = async ctx => {\n  const {\n    id\n  } = ctx.query;\n  const article = await ArticleProvider.getArticle(id);\n  return {\n    article\n  };\n};\n\nexport default Article;","map":null,"metadata":{},"sourceType":"module"}