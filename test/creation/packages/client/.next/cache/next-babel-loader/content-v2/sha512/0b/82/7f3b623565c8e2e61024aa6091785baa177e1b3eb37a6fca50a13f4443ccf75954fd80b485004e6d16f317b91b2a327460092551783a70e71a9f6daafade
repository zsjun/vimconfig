{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport { useTranslations } from 'next-intl';\nimport { copy } from '@/utils/copy';\nimport './index.module.scss';\nexport const MarkdownReader = ({\n  content\n}) => {\n  const ref = useRef();\n  const t = useTranslations();\n  useEffect(() => {\n    if (!content) {\n      return;\n    }\n\n    const el = ref.current;\n    const range = document.createRange();\n    const slot = range.createContextualFragment(content);\n    el.innerHTML = '';\n    el.appendChild(slot);\n  }, [content]); // 高亮\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const callbacks = [];\n    setTimeout(() => {\n      const blocks = ref.current.querySelectorAll('pre code');\n      blocks.forEach(block => {\n        const span = document.createElement('span');\n        span.classList.add('copy-code-btn');\n        span.innerText = t('copy');\n\n        span.onclick = () => copy(block.innerText, t);\n\n        block.parentNode.insertBefore(span, block);\n        callbacks.push(() => {\n          block.parentNode.removeChild(span);\n        });\n        hljs.highlightBlock(block);\n      });\n    }, 0); // eslint-disable-next-line consistent-return\n\n    return () => {\n      callbacks.forEach(cb => cb());\n    };\n  }, [content, t]);\n  return __jsx(\"div\", {\n    ref: ref,\n    className: 'markdown'\n  });\n};","map":null,"metadata":{},"sourceType":"module"}