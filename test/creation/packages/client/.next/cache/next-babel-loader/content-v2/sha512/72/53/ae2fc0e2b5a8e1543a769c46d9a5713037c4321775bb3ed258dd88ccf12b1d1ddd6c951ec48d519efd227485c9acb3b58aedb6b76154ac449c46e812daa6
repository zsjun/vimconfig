{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/pagination/style\";\nimport _Pagination from \"antd/lib/pagination\";\nimport _slicedToArray from \"/Users/zsj/work/vimconfig/test/creation/packages/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { CommentProvider } from '@/providers/comment';\nimport { usePagination } from '@/hooks/usePagination';\nimport { useToggle } from '@/hooks/useToggle';\nimport { Opacity } from '@/components/Animation/Opacity';\nimport { CommentEditor } from './CommentEditor';\nimport { Comments } from './CommentItem';\nimport styles from './index.module.scss';\nexport var COMMENT_DOM_ID = \"js-comment-id\";\nexport var Comment = function Comment(_ref) {\n  var articleId = _ref.hostId;\n  var ref = useRef(null);\n  var t = useTranslations();\n\n  var _useToggle = useToggle(true),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      firstLoad = _useToggle2[0],\n      setFirstLoad = _useToggle2[1];\n\n  var _usePagination = usePagination(function (params) {\n    return CommentProvider.getArticleComments(articleId, params);\n  }, {\n    pageSize: 6,\n    after: function after(_ref2) {\n      var page = _ref2.page;\n\n      if (page === 1 && firstLoad) {\n        setFirstLoad(false);\n        return;\n      }\n\n      Promise.resolve().then(function () {\n        ref.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      });\n    }\n  }),\n      comments = _usePagination.data,\n      total = _usePagination.total,\n      loading = _usePagination.loading,\n      page = _usePagination.page,\n      pageSize = _usePagination.pageSize,\n      setPage = _usePagination.setPage;\n\n  return __jsx(\"div\", {\n    id: COMMENT_DOM_ID,\n    ref: ref\n  }, __jsx(\"div\", {\n    className: styles.editorWrapper\n  }, __jsx(CommentEditor, {\n    hostId: articleId,\n    parentComment: null,\n    replyComment: null\n  })), __jsx(Comments, {\n    comments: comments\n  }), __jsx(Opacity, null, __jsx(\"div\", {\n    className: styles.pagination,\n    style: {\n      padding: loading || total > 0 ? '16px 0' : 0\n    }\n  }, !loading && total > 0 ? __jsx(_Pagination, {\n    size: \"small\",\n    current: page,\n    pageSize: pageSize,\n    total: total,\n    onChange: setPage\n  }) : loading ? __jsx(_Button, {\n    type: \"primary\",\n    loading: true\n  }, t('loading')) : null)));\n};","map":null,"metadata":{},"sourceType":"module"}