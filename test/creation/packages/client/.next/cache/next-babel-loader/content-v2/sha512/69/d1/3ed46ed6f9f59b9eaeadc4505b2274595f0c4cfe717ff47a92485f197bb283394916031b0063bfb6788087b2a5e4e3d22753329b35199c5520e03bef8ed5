{"ast":null,"code":"'use strict';\n\nvar mime = require('mime-types');\n\nvar xml = require('xml');\n\nfunction ifTruePush(bool, array, data) {\n  if (bool) {\n    array.push(data);\n  }\n}\n\nfunction ifTruePushArray(bool, array, dataArray) {\n  if (!bool) {\n    return;\n  }\n\n  dataArray.forEach(function (item) {\n    ifTruePush(item, array, item);\n  });\n}\n\nfunction getSize() {\n  return 0;\n}\n\nfunction generateXML(data) {\n  var channel = [];\n  channel.push({\n    title: {\n      _cdata: data.title\n    }\n  });\n  channel.push({\n    description: {\n      _cdata: data.description || data.title\n    }\n  });\n  channel.push({\n    link: data.site_url || 'http://github.com/dylang/node-rss'\n  }); // image_url set?\n\n  if (data.image_url) {\n    channel.push({\n      image: [{\n        url: data.image_url\n      }, {\n        title: data.title\n      }, {\n        link: data.site_url\n      }]\n    });\n  }\n\n  channel.push({\n    generator: data.generator\n  });\n  channel.push({\n    lastBuildDate: new Date().toUTCString()\n  });\n  ifTruePush(data.feed_url, channel, {\n    'atom:link': {\n      _attr: {\n        href: data.feed_url,\n        rel: 'self',\n        type: 'application/rss+xml'\n      }\n    }\n  });\n  ifTruePush(data.author, channel, {\n    author: {\n      _cdata: data.author\n    }\n  });\n  ifTruePush(data.pubDate, channel, {\n    pubDate: new Date(data.pubDate).toGMTString()\n  });\n  ifTruePush(data.copyright, channel, {\n    copyright: {\n      _cdata: data.copyright\n    }\n  });\n  ifTruePush(data.language, channel, {\n    language: {\n      _cdata: data.language\n    }\n  });\n  ifTruePush(data.managingEditor, channel, {\n    managingEditor: {\n      _cdata: data.managingEditor\n    }\n  });\n  ifTruePush(data.webMaster, channel, {\n    webMaster: {\n      _cdata: data.webMaster\n    }\n  });\n  ifTruePush(data.docs, channel, {\n    docs: data.docs\n  });\n  ifTruePush(data.ttl, channel, {\n    ttl: data.ttl\n  });\n  ifTruePush(data.hub, channel, {\n    'atom:link': {\n      _attr: {\n        href: data.hub,\n        rel: 'hub'\n      }\n    }\n  });\n\n  if (data.categories) {\n    data.categories.forEach(function (category) {\n      ifTruePush(category, channel, {\n        category: {\n          _cdata: category\n        }\n      });\n    });\n  }\n\n  ifTruePushArray(data.custom_elements, channel, data.custom_elements);\n  data.items.forEach(function (item) {\n    var item_values = [{\n      title: {\n        _cdata: item.title\n      }\n    }];\n    ifTruePush(item.description, item_values, {\n      description: {\n        _cdata: item.description\n      }\n    });\n    ifTruePush(item.url, item_values, {\n      link: item.url\n    });\n    ifTruePush(item.link || item.guid || item.title, item_values, {\n      guid: [{\n        _attr: {\n          isPermaLink: !item.guid && !!item.url\n        }\n      }, item.guid || item.url || item.title]\n    });\n    item.categories.forEach(function (category) {\n      ifTruePush(category, item_values, {\n        category: {\n          _cdata: category\n        }\n      });\n    });\n    ifTruePush(item.author || data.author, item_values, {\n      'dc:creator': {\n        _cdata: item.author || data.author\n      }\n    });\n    ifTruePush(item.date, item_values, {\n      pubDate: new Date(item.date).toGMTString()\n    }); // Set GeoRSS to true if lat and long are set\n\n    data.geoRSS = data.geoRSS || item.lat && item[\"long\"];\n    ifTruePush(item.lat, item_values, {\n      'geo:lat': item.lat\n    });\n    ifTruePush(item[\"long\"], item_values, {\n      'geo:long': item[\"long\"]\n    });\n\n    if (item.enclosure && item.enclosure.url) {\n      if (item.enclosure.file) {\n        item_values.push({\n          enclosure: {\n            _attr: {\n              url: item.enclosure.url,\n              length: item.enclosure.size || getSize(item.enclosure.file),\n              type: item.enclosure.type || mime.lookup(item.enclosure.file)\n            }\n          }\n        });\n      } else {\n        item_values.push({\n          enclosure: {\n            _attr: {\n              url: item.enclosure.url,\n              length: item.enclosure.size || 0,\n              type: item.enclosure.type || mime.lookup(item.enclosure.url)\n            }\n          }\n        });\n      }\n    }\n\n    ifTruePushArray(item.custom_elements, item_values, item.custom_elements);\n    channel.push({\n      item: item_values\n    });\n  }); // set up the attributes for the RSS feed.\n\n  var _attr = {\n    'xmlns:dc': 'http://purl.org/dc/elements/1.1/',\n    'xmlns:content': 'http://purl.org/rss/1.0/modules/content/',\n    'xmlns:atom': 'http://www.w3.org/2005/Atom',\n    'version': '2.0'\n  };\n  Object.keys(data.custom_namespaces).forEach(function (name) {\n    _attr['xmlns:' + name] = data.custom_namespaces[name];\n  }); // only add namespace if GeoRSS is true\n\n  if (data.geoRSS) {\n    _attr['xmlns:geo'] = 'http://www.w3.org/2003/01/geo/wgs84_pos#';\n  }\n\n  return {\n    rss: [{\n      _attr: _attr\n    }, {\n      channel: channel\n    }]\n  };\n}\n\nfunction RSS(options, items) {\n  options = options || {};\n  this.title = options.title || 'Untitled RSS Feed';\n  this.description = options.description || '';\n  this.generator = options.generator || 'RSS for Node';\n  this.feed_url = options.feed_url;\n  this.site_url = options.site_url;\n  this.image_url = options.image_url;\n  this.author = options.author;\n  this.categories = options.categories;\n  this.pubDate = options.pubDate;\n  this.hub = options.hub;\n  this.docs = options.docs;\n  this.copyright = options.copyright;\n  this.language = options.language;\n  this.managingEditor = options.managingEditor;\n  this.webMaster = options.webMaster;\n  this.ttl = options.ttl; // option to return feed as GeoRSS is set automatically if feed.lat/long is used\n\n  this.geoRSS = options.geoRSS || false;\n  this.custom_namespaces = options.custom_namespaces || {};\n  this.custom_elements = options.custom_elements || [];\n  this.items = items || [];\n\n  this.item = function (options) {\n    options = options || {};\n    var item = {\n      title: options.title || 'No title',\n      description: options.description || '',\n      url: options.url,\n      guid: options.guid,\n      categories: options.categories || [],\n      author: options.author,\n      date: options.date,\n      lat: options.lat,\n      \"long\": options[\"long\"],\n      enclosure: options.enclosure || false,\n      custom_elements: options.custom_elements || []\n    };\n    this.items.push(item);\n    return this;\n  };\n\n  this.xml = function (indent) {\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + xml(generateXML(this), indent);\n  };\n}\n\nexport default RSS;","map":null,"metadata":{},"sourceType":"module"}