{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[105],{Oiws:function(e,n,o){\"use strict\";o.r(n),o.d(n,\"conf\",(function(){return t})),o.d(n,\"language\",(function(){return s}));var t={comments:{lineComment:\";\",blockComment:[\"#|\",\"|#\"]},brackets:[[\"(\",\")\"],[\"{\",\"}\"],[\"[\",\"]\"]],autoClosingPairs:[{open:\"{\",close:\"}\"},{open:\"[\",close:\"]\"},{open:\"(\",close:\")\"},{open:'\"',close:'\"'}],surroundingPairs:[{open:\"{\",close:\"}\"},{open:\"[\",close:\"]\"},{open:\"(\",close:\")\"},{open:'\"',close:'\"'}]},s={defaultToken:\"\",ignoreCase:!0,tokenPostfix:\".scheme\",brackets:[{open:\"(\",close:\")\",token:\"delimiter.parenthesis\"},{open:\"{\",close:\"}\",token:\"delimiter.curly\"},{open:\"[\",close:\"]\",token:\"delimiter.square\"}],keywords:[\"case\",\"do\",\"let\",\"loop\",\"if\",\"else\",\"when\",\"cons\",\"car\",\"cdr\",\"cond\",\"lambda\",\"lambda*\",\"syntax-rules\",\"format\",\"set!\",\"quote\",\"eval\",\"append\",\"list\",\"list?\",\"member?\",\"load\"],constants:[\"#t\",\"#f\"],operators:[\"eq?\",\"eqv?\",\"equal?\",\"and\",\"or\",\"not\",\"null?\"],tokenizer:{root:[[/#[xXoObB][0-9a-fA-F]+/,\"number.hex\"],[/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/,\"number.float\"],[/(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,[\"keyword\",\"white\",\"variable\"]],{include:\"@whitespace\"},{include:\"@strings\"},[/[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,{cases:{\"@keywords\":\"keyword\",\"@constants\":\"constant\",\"@operators\":\"operators\",\"@default\":\"identifier\"}}]],comment:[[/[^\\|#]+/,\"comment\"],[/#\\|/,\"comment\",\"@push\"],[/\\|#/,\"comment\",\"@pop\"],[/[\\|#]/,\"comment\"]],whitespace:[[/[ \\t\\r\\n]+/,\"white\"],[/#\\|/,\"comment\",\"@comment\"],[/;.*$/,\"comment\"]],strings:[[/\"$/,\"string\",\"@popall\"],[/\"(?=.)/,\"string\",\"@multiLineString\"]],multiLineString:[[/[^\\\\\"]+$/,\"string\",\"@popall\"],[/[^\\\\\"]+/,\"string\"],[/\\\\./,\"string.escape\"],[/\"/,\"string\",\"@popall\"],[/\\\\$/,\"string\"]]}}}}]);","map":{"version":3,"sources":["static/chunks/105.32781098d275f4141ed1.js"],"names":["window","push","Oiws","module","__webpack_exports__","__webpack_require__","r","d","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","include","cases","@keywords","@constants","@operators","@default","comment","whitespace","strings","multiLineString"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,QAAQ,WAAa,OAAOI,KACvEH,EAAoBE,EAAEH,EAAqB,YAAY,WAAa,OAAOK,KAM1G,IAAID,EAAO,CACPE,SAAU,CACNC,YAAa,IACbC,aAAc,CAAC,KAAM,OAEzBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAExBC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,OAGxBP,EAAW,CACXS,aAAc,GACdC,YAAY,EACZC,aAAc,UACdP,SAAU,CACN,CAAEE,KAAM,IAAKC,MAAO,IAAKK,MAAO,yBAChC,CAAEN,KAAM,IAAKC,MAAO,IAAKK,MAAO,mBAChC,CAAEN,KAAM,IAAKC,MAAO,IAAKK,MAAO,qBAEpCC,SAAU,CACN,OACA,KACA,MACA,OACA,KACA,OACA,OACA,OACA,MACA,MACA,OACA,SACA,UACA,eACA,SACA,OACA,QACA,OACA,SACA,OACA,QACA,UACA,QAEJC,UAAW,CAAC,KAAM,MAClBC,UAAW,CAAC,MAAO,OAAQ,SAAU,MAAO,KAAM,MAAO,SACzDC,UAAW,CACPC,KAAM,CACF,CAAC,wBAAyB,cAC1B,CAAC,2CAA4C,gBAC7C,CACI,yEACA,CAAC,UAAW,QAAS,aAEzB,CAAEC,QAAS,eACX,CAAEA,QAAS,YACX,CACI,kCACA,CACIC,MAAO,CACHC,YAAa,UACbC,aAAc,WACdC,aAAc,YACdC,WAAY,iBAK5BC,QAAS,CACL,CAAC,UAAW,WACZ,CAAC,MAAO,UAAW,SACnB,CAAC,MAAO,UAAW,QACnB,CAAC,QAAS,YAEdC,WAAY,CACR,CAAC,aAAc,SACf,CAAC,MAAO,UAAW,YACnB,CAAC,OAAQ,YAEbC,QAAS,CACL,CAAC,KAAM,SAAU,WACjB,CAAC,SAAU,SAAU,qBAEzBC,gBAAiB,CACb,CAAC,WAAY,SAAU,WACvB,CAAC,UAAW,UACZ,CAAC,MAAO,iBACR,CAAC,IAAK,SAAU,WAChB,CAAC,MAAO"},"name":"static/chunks/105.32781098d275f4141ed1.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[105],{\n\n/***/ \"Oiws\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nvar conf = {\n    comments: {\n        lineComment: ';',\n        blockComment: ['#|', '|#'],\n    },\n    brackets: [['(', ')'], ['{', '}'], ['[', ']']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n};\nvar language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.scheme',\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n    ],\n    keywords: [\n        'case',\n        'do',\n        'let',\n        'loop',\n        'if',\n        'else',\n        'when',\n        'cons',\n        'car',\n        'cdr',\n        'cond',\n        'lambda',\n        'lambda*',\n        'syntax-rules',\n        'format',\n        'set!',\n        'quote',\n        'eval',\n        'append',\n        'list',\n        'list?',\n        'member?',\n        'load',\n    ],\n    constants: ['#t', '#f'],\n    operators: ['eq?', 'eqv?', 'equal?', 'and', 'or', 'not', 'null?'],\n    tokenizer: {\n        root: [\n            [/#[xXoObB][0-9a-fA-F]+/, 'number.hex'],\n            [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\n            [\n                /(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n                ['keyword', 'white', 'variable'],\n            ],\n            { include: '@whitespace' },\n            { include: '@strings' },\n            [\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@constants': 'constant',\n                        '@operators': 'operators',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n        ],\n        comment: [\n            [/[^\\|#]+/, 'comment'],\n            [/#\\|/, 'comment', '@push'],\n            [/\\|#/, 'comment', '@pop'],\n            [/[\\|#]/, 'comment'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/#\\|/, 'comment', '@comment'],\n            [/;.*$/, 'comment'],\n        ],\n        strings: [\n            [/\"$/, 'string', '@popall'],\n            [/\"(?=.)/, 'string', '@multiLineString'],\n        ],\n        multiLineString: [\n            [/[^\\\\\"]+$/, 'string', '@popall'],\n            [/[^\\\\\"]+/, 'string'],\n            [/\\\\./, 'string.escape'],\n            [/\"/, 'string', '@popall'],\n            [/\\\\$/, 'string']\n        ],\n    },\n};\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/monaco-markdown/node_modules/monaco-editor/esm/vs/basic-languages/scheme/scheme.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACa;AACN;AACP;AACA,uBAAuB;AACvB;AACA,KAAK;AACL,8BAA8B,KAAK;AACnC;AACA,SAAS,SAAS,YAAY,GAAG;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC;AACA;AACA,SAAS,SAAS,YAAY,GAAG;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,SAAS,wDAAwD;AACjE,SAAS,SAAS,YAAY,6BAA6B;AAC3D,SAAS,mDAAmD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL","file":"x","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: ';',\n        blockComment: ['#|', '|#'],\n    },\n    brackets: [['(', ')'], ['{', '}'], ['[', ']']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.scheme',\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n    ],\n    keywords: [\n        'case',\n        'do',\n        'let',\n        'loop',\n        'if',\n        'else',\n        'when',\n        'cons',\n        'car',\n        'cdr',\n        'cond',\n        'lambda',\n        'lambda*',\n        'syntax-rules',\n        'format',\n        'set!',\n        'quote',\n        'eval',\n        'append',\n        'list',\n        'list?',\n        'member?',\n        'load',\n    ],\n    constants: ['#t', '#f'],\n    operators: ['eq?', 'eqv?', 'equal?', 'and', 'or', 'not', 'null?'],\n    tokenizer: {\n        root: [\n            [/#[xXoObB][0-9a-fA-F]+/, 'number.hex'],\n            [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\n            [\n                /(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n                ['keyword', 'white', 'variable'],\n            ],\n            { include: '@whitespace' },\n            { include: '@strings' },\n            [\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@constants': 'constant',\n                        '@operators': 'operators',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n        ],\n        comment: [\n            [/[^\\|#]+/, 'comment'],\n            [/#\\|/, 'comment', '@push'],\n            [/\\|#/, 'comment', '@pop'],\n            [/[\\|#]/, 'comment'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/#\\|/, 'comment', '@comment'],\n            [/;.*$/, 'comment'],\n        ],\n        strings: [\n            [/\"$/, 'string', '@popall'],\n            [/\"(?=.)/, 'string', '@multiLineString'],\n        ],\n        multiLineString: [\n            [/[^\\\\\"]+$/, 'string', '@popall'],\n            [/[^\\\\\"]+/, 'string'],\n            [/\\\\./, 'string.escape'],\n            [/\"/, 'string', '@popall'],\n            [/\\\\$/, 'string']\n        ],\n    },\n};\n"]}}