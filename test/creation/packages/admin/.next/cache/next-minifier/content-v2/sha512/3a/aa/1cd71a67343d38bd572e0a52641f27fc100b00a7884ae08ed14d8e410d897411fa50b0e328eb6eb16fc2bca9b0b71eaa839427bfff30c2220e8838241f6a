{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[116],{zk5s:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"conf\",(function(){return r})),t.d(n,\"language\",(function(){return o}));var r={comments:{lineComment:\"#\"},brackets:[[\"{\",\"}\"],[\"[\",\"]\"],[\"(\",\")\"]],autoClosingPairs:[{open:\"{\",close:\"}\"},{open:\"[\",close:\"]\"},{open:\"(\",close:\")\"},{open:'\"',close:'\"'},{open:\"'\",close:\"'\"}],surroundingPairs:[{open:\"{\",close:\"}\"},{open:\"[\",close:\"]\"},{open:\"(\",close:\")\"},{open:'\"',close:'\"'},{open:\"'\",close:\"'\"}],folding:{offSide:!0}},o={tokenPostfix:\".yaml\",brackets:[{token:\"delimiter.bracket\",open:\"{\",close:\"}\"},{token:\"delimiter.square\",open:\"[\",close:\"]\"}],keywords:[\"true\",\"True\",\"TRUE\",\"false\",\"False\",\"FALSE\",\"null\",\"Null\",\"Null\",\"~\"],numberInteger:/(?:0|[+-]?[0-9]+)/,numberFloat:/(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,numberOctal:/0o[0-7]+/,numberHex:/0x[0-9a-fA-F]+/,numberInfinity:/[+-]?\\.(?:inf|Inf|INF)/,numberNaN:/\\.(?:nan|Nan|NAN)/,numberDate:/\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,escapes:/\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,tokenizer:{root:[{include:\"@whitespace\"},{include:\"@comment\"},[/%[^ ]+.*$/,\"meta.directive\"],[/---/,\"operators.directivesEnd\"],[/\\.{3}/,\"operators.documentEnd\"],[/[-?:](?= )/,\"operators\"],{include:\"@anchor\"},{include:\"@tagHandle\"},{include:\"@flowCollections\"},{include:\"@blockStyle\"},[/@numberInteger(?![ \\t]*\\S+)/,\"number\"],[/@numberFloat(?![ \\t]*\\S+)/,\"number.float\"],[/@numberOctal(?![ \\t]*\\S+)/,\"number.octal\"],[/@numberHex(?![ \\t]*\\S+)/,\"number.hex\"],[/@numberInfinity(?![ \\t]*\\S+)/,\"number.infinity\"],[/@numberNaN(?![ \\t]*\\S+)/,\"number.nan\"],[/@numberDate(?![ \\t]*\\S+)/,\"number.date\"],[/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/,[\"type\",\"white\",\"operators\",\"white\"]],{include:\"@flowScalars\"},[/.+$/,{cases:{\"@keywords\":\"keyword\",\"@default\":\"string\"}}]],object:[{include:\"@whitespace\"},{include:\"@comment\"},[/\\}/,\"@brackets\",\"@pop\"],[/,/,\"delimiter.comma\"],[/:(?= )/,\"operators\"],[/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/,\"type\"],{include:\"@flowCollections\"},{include:\"@flowScalars\"},{include:\"@tagHandle\"},{include:\"@anchor\"},{include:\"@flowNumber\"},[/[^\\},]+/,{cases:{\"@keywords\":\"keyword\",\"@default\":\"string\"}}]],array:[{include:\"@whitespace\"},{include:\"@comment\"},[/\\]/,\"@brackets\",\"@pop\"],[/,/,\"delimiter.comma\"],{include:\"@flowCollections\"},{include:\"@flowScalars\"},{include:\"@tagHandle\"},{include:\"@anchor\"},{include:\"@flowNumber\"},[/[^\\],]+/,{cases:{\"@keywords\":\"keyword\",\"@default\":\"string\"}}]],multiString:[[/^( +).+$/,\"string\",\"@multiStringContinued.$1\"]],multiStringContinued:[[/^( *).+$/,{cases:{\"$1==$S2\":\"string\",\"@default\":{token:\"@rematch\",next:\"@popall\"}}}]],whitespace:[[/[ \\t\\r\\n]+/,\"white\"]],comment:[[/#.*$/,\"comment\"]],flowCollections:[[/\\[/,\"@brackets\",\"@array\"],[/\\{/,\"@brackets\",\"@object\"]],flowScalars:[[/\"([^\"\\\\]|\\\\.)*$/,\"string.invalid\"],[/'([^'\\\\]|\\\\.)*$/,\"string.invalid\"],[/'[^']*'/,\"string\"],[/\"/,\"string\",\"@doubleQuotedString\"]],doubleQuotedString:[[/[^\\\\\"]+/,\"string\"],[/@escapes/,\"string.escape\"],[/\\\\./,\"string.escape.invalid\"],[/\"/,\"string\",\"@pop\"]],blockStyle:[[/[>|][0-9]*[+-]?$/,\"operators\",\"@multiString\"]],flowNumber:[[/@numberInteger(?=[ \\t]*[,\\]\\}])/,\"number\"],[/@numberFloat(?=[ \\t]*[,\\]\\}])/,\"number.float\"],[/@numberOctal(?=[ \\t]*[,\\]\\}])/,\"number.octal\"],[/@numberHex(?=[ \\t]*[,\\]\\}])/,\"number.hex\"],[/@numberInfinity(?=[ \\t]*[,\\]\\}])/,\"number.infinity\"],[/@numberNaN(?=[ \\t]*[,\\]\\}])/,\"number.nan\"],[/@numberDate(?=[ \\t]*[,\\]\\}])/,\"number.date\"]],tagHandle:[[/\\![^ ]*/,\"tag\"]],anchor:[[/[&*][^ ]+/,\"namespace\"]]}}}}]);","map":{"version":3,"sources":["static/chunks/116.cd36c45ec19336ac1b54.js"],"names":["window","push","zk5s","module","__webpack_exports__","__webpack_require__","r","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","offSide","tokenPostfix","token","keywords","numberInteger","numberFloat","numberOctal","numberHex","numberInfinity","numberNaN","numberDate","escapes","tokenizer","root","include","cases","@keywords","@default","object","array","multiString","multiStringContinued","$1==$S2","next","whitespace","comment","flowCollections","flowScalars","doubleQuotedString","blockStyle","flowNumber","tagHandle","anchor"],"mappings":"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"},"name":"static/chunks/116.cd36c45ec19336ac1b54.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[116],{\n\n/***/ \"zk5s\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\nvar conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        offSide: true\n    }\n};\nvar language = {\n    tokenPostfix: '.yaml',\n    brackets: [\n        { token: 'delimiter.bracket', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' }\n    ],\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n    numberOctal: /0o[0-7]+/,\n    numberHex: /0x[0-9a-fA-F]+/,\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Directive\n            [/%[^ ]+.*$/, 'meta.directive'],\n            // Document Markers\n            [/---/, 'operators.directivesEnd'],\n            [/\\.{3}/, 'operators.documentEnd'],\n            // Block Structure Indicators\n            [/[-?:](?= )/, 'operators'],\n            { include: '@anchor' },\n            { include: '@tagHandle' },\n            { include: '@flowCollections' },\n            { include: '@blockStyle' },\n            // Numbers\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\n            // Key:Value pair\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\n            { include: '@flowScalars' },\n            // String nodes\n            [/.+$/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Mapping\n        object: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Mapping termination\n            [/\\}/, '@brackets', '@pop'],\n            // Flow Mapping delimiter\n            [/,/, 'delimiter.comma'],\n            // Flow Mapping Key:Value delimiter\n            [/:(?= )/, 'operators'],\n            // Flow Mapping Key:Value key\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\},]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Sequence\n        array: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Sequence termination\n            [/\\]/, '@brackets', '@pop'],\n            // Flow Sequence delimiter\n            [/,/, 'delimiter.comma'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\],]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // First line of a Block Style\n        multiString: [\n            [/^( +).+$/, 'string', '@multiStringContinued.$1']\n        ],\n        // Further lines of a Block Style\n        //   Workaround for indentation detection\n        multiStringContinued: [\n            [/^( *).+$/, {\n                    cases: {\n                        '$1==$S2': 'string',\n                        '@default': { token: '@rematch', next: '@popall' }\n                    }\n                }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white']\n        ],\n        // Only line comments\n        comment: [\n            [/#.*$/, 'comment']\n        ],\n        // Start Flow Collections\n        flowCollections: [\n            [/\\[/, '@brackets', '@array'],\n            [/\\{/, '@brackets', '@object']\n        ],\n        // Start Flow Scalars (quoted strings)\n        flowScalars: [\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'[^']*'/, 'string'],\n            [/\"/, 'string', '@doubleQuotedString']\n        ],\n        doubleQuotedString: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        // Start Block Scalar\n        blockStyle: [\n            [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']\n        ],\n        // Numbers in Flow Collections (terminate with ,]})\n        flowNumber: [\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\n        ],\n        tagHandle: [\n            [/\\![^ ]*/, 'tag']\n        ],\n        anchor: [\n            [/[&*][^ ]+/, 'namespace']\n        ]\n    }\n};\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/monaco-markdown/node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAO;AACP;AACA;AACA,KAAK;AACL;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA,SAAS,SAAS,YAAY,GAAG;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA,SAAS,SAAS,YAAY,GAAG;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,SAAS,qCAAqC,YAAY,GAAG;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB,sDAAsD,EAAE;AACxD;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,8BAA8B;AAC3C,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,aAAa,8BAA8B;AAC3C,aAAa,0BAA0B;AACvC;AACA,aAAa,wBAAwB;AACrC,aAAa,qBAAqB;AAClC,aAAa,yBAAyB;AACtC;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;AACA,aAAa,8BAA8B;AAC3C,aAAa,0BAA0B;AACvC;AACA,aAAa,wBAAwB;AACrC,aAAa,qBAAqB;AAClC,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,2CAA2C;AAC3C,yCAAyC;AACzC,yCAAyC;AACzC,uCAAuC;AACvC,4CAA4C;AAC5C,uCAAuC;AACvC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"x","sourcesContent":["export var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    tokenPostfix: '.yaml',\n    brackets: [\n        { token: 'delimiter.bracket', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' }\n    ],\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n    numberOctal: /0o[0-7]+/,\n    numberHex: /0x[0-9a-fA-F]+/,\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Directive\n            [/%[^ ]+.*$/, 'meta.directive'],\n            // Document Markers\n            [/---/, 'operators.directivesEnd'],\n            [/\\.{3}/, 'operators.documentEnd'],\n            // Block Structure Indicators\n            [/[-?:](?= )/, 'operators'],\n            { include: '@anchor' },\n            { include: '@tagHandle' },\n            { include: '@flowCollections' },\n            { include: '@blockStyle' },\n            // Numbers\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\n            // Key:Value pair\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\n            { include: '@flowScalars' },\n            // String nodes\n            [/.+$/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Mapping\n        object: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Mapping termination\n            [/\\}/, '@brackets', '@pop'],\n            // Flow Mapping delimiter\n            [/,/, 'delimiter.comma'],\n            // Flow Mapping Key:Value delimiter\n            [/:(?= )/, 'operators'],\n            // Flow Mapping Key:Value key\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\},]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Sequence\n        array: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Sequence termination\n            [/\\]/, '@brackets', '@pop'],\n            // Flow Sequence delimiter\n            [/,/, 'delimiter.comma'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\],]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // First line of a Block Style\n        multiString: [\n            [/^( +).+$/, 'string', '@multiStringContinued.$1']\n        ],\n        // Further lines of a Block Style\n        //   Workaround for indentation detection\n        multiStringContinued: [\n            [/^( *).+$/, {\n                    cases: {\n                        '$1==$S2': 'string',\n                        '@default': { token: '@rematch', next: '@popall' }\n                    }\n                }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white']\n        ],\n        // Only line comments\n        comment: [\n            [/#.*$/, 'comment']\n        ],\n        // Start Flow Collections\n        flowCollections: [\n            [/\\[/, '@brackets', '@array'],\n            [/\\{/, '@brackets', '@object']\n        ],\n        // Start Flow Scalars (quoted strings)\n        flowScalars: [\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'[^']*'/, 'string'],\n            [/\"/, 'string', '@doubleQuotedString']\n        ],\n        doubleQuotedString: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        // Start Block Scalar\n        blockStyle: [\n            [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']\n        ],\n        // Numbers in Flow Collections (terminate with ,]})\n        flowNumber: [\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\n        ],\n        tagHandle: [\n            [/\\![^ ]*/, 'tag']\n        ],\n        anchor: [\n            [/[&*][^ ]+/, 'namespace']\n        ]\n    }\n};\n"]}}