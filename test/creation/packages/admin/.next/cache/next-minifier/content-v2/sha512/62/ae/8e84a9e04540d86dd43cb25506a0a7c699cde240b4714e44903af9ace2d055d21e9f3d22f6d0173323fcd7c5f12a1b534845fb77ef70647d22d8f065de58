{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[77],{N2Gu:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"conf\",(function(){return o})),t.d(n,\"language\",(function(){return s}));var o={comments:{lineComment:\"#\"},brackets:[[\"{\",\"}\"],[\"[\",\"]\"],[\"(\",\")\"]],autoClosingPairs:[{open:\"{\",close:\"}\"},{open:\"[\",close:\"]\"},{open:\"(\",close:\")\"},{open:'\"\"\"',close:'\"\"\"',notIn:[\"string\",\"comment\"]},{open:'\"',close:'\"',notIn:[\"string\",\"comment\"]}],surroundingPairs:[{open:\"{\",close:\"}\"},{open:\"[\",close:\"]\"},{open:\"(\",close:\")\"},{open:'\"\"\"',close:'\"\"\"'},{open:'\"',close:'\"'}],folding:{offSide:!0}},s={defaultToken:\"invalid\",tokenPostfix:\".gql\",keywords:[\"null\",\"true\",\"false\",\"query\",\"mutation\",\"subscription\",\"extend\",\"schema\",\"directive\",\"scalar\",\"type\",\"interface\",\"union\",\"enum\",\"input\",\"implements\",\"fragment\",\"on\"],typeKeywords:[\"Int\",\"Float\",\"String\",\"Boolean\",\"ID\"],directiveLocations:[\"SCHEMA\",\"SCALAR\",\"OBJECT\",\"FIELD_DEFINITION\",\"ARGUMENT_DEFINITION\",\"INTERFACE\",\"UNION\",\"ENUM\",\"ENUM_VALUE\",\"INPUT_OBJECT\",\"INPUT_FIELD_DEFINITION\",\"QUERY\",\"MUTATION\",\"SUBSCRIPTION\",\"FIELD\",\"FRAGMENT_DEFINITION\",\"FRAGMENT_SPREAD\",\"INLINE_FRAGMENT\",\"VARIABLE_DEFINITION\"],operators:[\"=\",\"!\",\"?\",\":\",\"&\",\"|\"],symbols:/[=!?:&|]+/,escapes:/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,tokenizer:{root:[[/[a-z_$][\\w$]*/,{cases:{\"@keywords\":\"keyword\",\"@default\":\"identifier\"}}],[/[A-Z][\\w\\$]*/,{cases:{\"@typeKeywords\":\"keyword\",\"@default\":\"type.identifier\"}}],{include:\"@whitespace\"},[/[{}()\\[\\]]/,\"@brackets\"],[/@symbols/,{cases:{\"@operators\":\"operator\",\"@default\":\"\"}}],[/@\\s*[a-zA-Z_\\$][\\w\\$]*/,{token:\"annotation\",log:\"annotation token: $0\"}],[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/,\"number.float\"],[/0[xX][0-9a-fA-F]+/,\"number.hex\"],[/\\d+/,\"number\"],[/[;,.]/,\"delimiter\"],[/\"\"\"/,{token:\"string\",next:\"@mlstring\",nextEmbedded:\"markdown\"}],[/\"([^\"\\\\]|\\\\.)*$/,\"string.invalid\"],[/\"/,{token:\"string.quote\",bracket:\"@open\",next:\"@string\"}]],mlstring:[[/[^\"]+/,\"string\"],['\"\"\"',{token:\"string\",next:\"@pop\",nextEmbedded:\"@pop\"}]],string:[[/[^\\\\\"]+/,\"string\"],[/@escapes/,\"string.escape\"],[/\\\\./,\"string.escape.invalid\"],[/\"/,{token:\"string.quote\",bracket:\"@close\",next:\"@pop\"}]],whitespace:[[/[ \\t\\r\\n]+/,\"\"],[/#.*$/,\"comment\"]]}}}}]);","map":{"version":3,"sources":["static/chunks/77.35ce997c2558e4096126.js"],"names":["window","push","N2Gu","module","__webpack_exports__","__webpack_require__","r","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","offSide","defaultToken","tokenPostfix","keywords","typeKeywords","directiveLocations","operators","symbols","escapes","tokenizer","root","cases","@keywords","@default","@typeKeywords","include","@operators","token","log","next","nextEmbedded","bracket","mlstring","string","whitespace"],"mappings":"CAACA,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAErEC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aACAA,EAAoBC,EAAEF,GACSC,EAAoBE,EAAEH,EAAqB,QAAQ,WAAa,OAAOI,KACvEH,EAAoBE,EAAEH,EAAqB,YAAY,WAAa,OAAOK,KAM1G,IAAID,EAAO,CACPE,SAAU,CACNC,YAAa,KAEjBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,MAAOC,MAAO,MAAOC,MAAO,CAAC,SAAU,YAC/C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,aAE/CC,iBAAkB,CACd,CAAEH,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,MAAOC,MAAO,OACtB,CAAED,KAAM,IAAKC,MAAO,MAExBG,QAAS,CACLC,SAAS,IAGbV,EAAW,CAEXW,aAAc,UACdC,aAAc,OACdC,SAAU,CACN,OAAQ,OAAQ,QAChB,QAAS,WAAY,eACrB,SAAU,SAAU,YACpB,SAAU,OAAQ,YAAa,QAAS,OAAQ,QAAS,aACzD,WAAY,MAEhBC,aAAc,CAAC,MAAO,QAAS,SAAU,UAAW,MACpDC,mBAAoB,CAChB,SAAU,SAAU,SAAU,mBAAoB,sBAClD,YAAa,QAAS,OAAQ,aAAc,eAAgB,yBAC5D,QAAS,WAAY,eAAgB,QAAS,sBAC9C,kBAAmB,kBAAmB,uBAE1CC,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAErCC,QAAS,YAETC,QAAS,qCAETC,UAAW,CACPC,KAAM,CAEF,CACI,gBACA,CACIC,MAAO,CACHC,YAAa,UACbC,WAAY,gBAIxB,CACI,eACA,CACIF,MAAO,CACHG,gBAAiB,UACjBD,WAAY,qBAKxB,CAAEE,QAAS,eAEX,CAAC,aAAc,aACf,CACI,WACA,CAAEJ,MAAO,CAAEK,aAAc,WAAYH,WAAY,MAKrD,CACI,yBACA,CAAEI,MAAO,aAAcC,IAAK,yBAGhC,CAAC,2BAA4B,gBAC7B,CAAC,oBAAqB,cACtB,CAAC,MAAO,UAER,CAAC,QAAS,aACV,CAAC,MACG,CAAED,MAAO,SAAUE,KAAM,YAAaC,aAAc,aAGxD,CAAC,kBAAmB,kBACpB,CAAC,IAAK,CAAEH,MAAO,eAAgBI,QAAS,QAASF,KAAM,aAE3DG,SAAU,CACN,CAAC,QAAS,UACV,CAAC,MAAO,CAAEL,MAAO,SAAUE,KAAM,OAAQC,aAAc,UAE3DG,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,CAAEN,MAAO,eAAgBI,QAAS,SAAUF,KAAM,UAE5DK,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,OAAQ"},"name":"static/chunks/77.35ce997c2558e4096126.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[77],{\n\n/***/ \"N2Gu\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nvar conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"\"\"', close: '\"\"\"', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"\"\"', close: '\"\"\"' },\n        { open: '\"', close: '\"' },\n    ],\n    folding: {\n        offSide: true\n    }\n};\nvar language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n    tokenPostfix: '.gql',\n    keywords: [\n        'null', 'true', 'false',\n        'query', 'mutation', 'subscription',\n        'extend', 'schema', 'directive',\n        'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements',\n        'fragment', 'on',\n    ],\n    typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\n    directiveLocations: [\n        'SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION',\n        'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION',\n        'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION',\n        'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION',\n    ],\n    operators: ['=', '!', '?', ':', '&', '|'],\n    // we include these common regular expressions\n    symbols: /[=!?:&|]+/,\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-z_$][\\w$]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n            [\n                /[A-Z][\\w\\$]*/,\n                {\n                    cases: {\n                        '@typeKeywords': 'keyword',\n                        '@default': 'type.identifier',\n                    },\n                },\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [\n                /@symbols/,\n                { cases: { '@operators': 'operator', '@default': '' } },\n            ],\n            // @ annotations.\n            // As an example, we emit a debugging log message on these tokens.\n            // Note: message are supressed during the first load -- change some lines to see them.\n            [\n                /@\\s*[a-zA-Z_\\$][\\w\\$]*/,\n                { token: 'annotation', log: 'annotation token: $0' },\n            ],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            [/\"\"\"/,\n                { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }\n            ],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n        ],\n        mlstring: [\n            [/[^\"]+/, 'string'],\n            ['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, ''], [/#.*$/, 'comment']],\n    },\n};\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/monaco-markdown/node_modules/monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACa;AACN;AACP;AACA;AACA,KAAK;AACL;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA,SAAS,SAAS,YAAY,GAAG;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,0DAA0D;AACnE,SAAS,sDAAsD;AAC/D;AACA;AACA,SAAS,SAAS,YAAY,GAAG;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AACjC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa,yBAAyB;AACtC;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB,SAAS,2CAA2C,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mDAAmD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB,2DAA2D;AAC9E;AACA;AACA;AACA,qBAAqB,sDAAsD;AAC3E;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAyD;AAC5E;AACA;AACA,KAAK;AACL","file":"x","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"\"\"', close: '\"\"\"', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"\"\"', close: '\"\"\"' },\n        { open: '\"', close: '\"' },\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n    tokenPostfix: '.gql',\n    keywords: [\n        'null', 'true', 'false',\n        'query', 'mutation', 'subscription',\n        'extend', 'schema', 'directive',\n        'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements',\n        'fragment', 'on',\n    ],\n    typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\n    directiveLocations: [\n        'SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION',\n        'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION',\n        'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION',\n        'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION',\n    ],\n    operators: ['=', '!', '?', ':', '&', '|'],\n    // we include these common regular expressions\n    symbols: /[=!?:&|]+/,\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-z_$][\\w$]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n            [\n                /[A-Z][\\w\\$]*/,\n                {\n                    cases: {\n                        '@typeKeywords': 'keyword',\n                        '@default': 'type.identifier',\n                    },\n                },\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [\n                /@symbols/,\n                { cases: { '@operators': 'operator', '@default': '' } },\n            ],\n            // @ annotations.\n            // As an example, we emit a debugging log message on these tokens.\n            // Note: message are supressed during the first load -- change some lines to see them.\n            [\n                /@\\s*[a-zA-Z_\\$][\\w\\$]*/,\n                { token: 'annotation', log: 'annotation token: $0' },\n            ],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            [/\"\"\"/,\n                { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }\n            ],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n        ],\n        mlstring: [\n            [/[^\"]+/, 'string'],\n            ['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, ''], [/#.*$/, 'comment']],\n    },\n};\n"]}}