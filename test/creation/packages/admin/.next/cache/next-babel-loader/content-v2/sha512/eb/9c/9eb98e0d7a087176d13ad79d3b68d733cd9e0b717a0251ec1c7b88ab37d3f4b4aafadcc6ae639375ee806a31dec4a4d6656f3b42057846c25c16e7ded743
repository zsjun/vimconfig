{"ast":null,"code":"import \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport \"antd/lib/upload/style\";\nimport _Upload from \"antd/lib/upload\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { FileProvider } from '@/providers/file';\nexport const Upload = ({\n  onChange = null,\n  onOK = null,\n  style = {},\n  useDragger = true,\n  children = null\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const uploadProps = {\n    name: 'file',\n    multiple: true,\n    action: '',\n    showUploadList: false,\n\n    beforeUpload(file) {\n      setLoading(true);\n      FileProvider.uploadFile(file).then(res => {\n        setLoading(false);\n\n        _message.success('上传成功');\n\n        onChange && onChange(res.url);\n        onOK && onOK();\n      }).catch(() => {\n        setLoading(false);\n      });\n      return Promise.reject(new Error('cancel'));\n    }\n\n  };\n  const Wrap = useDragger ? _Upload.Dragger : _Upload;\n  return __jsx(_Spin, {\n    tip: \"\\u6587\\u4EF6\\u4E0A\\u4F20\\u4E2D...\",\n    spinning: loading\n  }, __jsx(Wrap, _extends({}, uploadProps, {\n    style: style\n  }), children || __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"ant-upload-drag-icon\"\n  }, __jsx(InboxOutlined, null)), __jsx(\"p\", {\n    className: \"ant-upload-text\"\n  }, \"\\u70B9\\u51FB\\u9009\\u62E9\\u6587\\u4EF6\\u6216\\u5C06\\u6587\\u4EF6\\u62D6\\u62FD\\u5230\\u6B64\\u5904\"), __jsx(\"p\", {\n    className: \"ant-upload-hint\"\n  }, \"\\u6587\\u4EF6\\u5C06\\u4E0A\\u4F20\\u5230 OSS, \\u5982\\u672A\\u914D\\u7F6E\\u8BF7\\u5148\\u914D\\u7F6E\"))));\n};","map":null,"metadata":{},"sourceType":"module"}