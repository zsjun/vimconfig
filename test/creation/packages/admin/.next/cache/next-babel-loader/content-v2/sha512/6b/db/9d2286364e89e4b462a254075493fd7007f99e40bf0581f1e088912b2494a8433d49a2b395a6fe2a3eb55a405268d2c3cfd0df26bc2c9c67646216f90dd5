{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { httpProvider } from './http';\nexport var KnowledgeProvider = /*#__PURE__*/function () {\n  function KnowledgeProvider() {\n    _classCallCheck(this, KnowledgeProvider);\n  }\n\n  _createClass(KnowledgeProvider, null, [{\n    key: \"createBook\",\n\n    /**\n     * 创建知识库\n     * @param data\n     */\n    value: function createBook(data) {\n      return httpProvider.post('/knowledge/book', data);\n    }\n    /**\n     * 创建知识库章节\n     * @param data\n     */\n\n  }, {\n    key: \"createChapters\",\n    value: function createChapters(data) {\n      return httpProvider.post('/knowledge/chapter', data);\n    }\n    /**\n     * 删除文章\n     * @param id\n     */\n\n  }, {\n    key: \"deleteKnowledge\",\n    value: function () {\n      var _deleteKnowledge = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", httpProvider[\"delete\"](\"/knowledge/\".concat(id)));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function deleteKnowledge(_x) {\n        return _deleteKnowledge.apply(this, arguments);\n      }\n\n      return deleteKnowledge;\n    }()\n    /**\n     * 更新文章\n     * @param id\n     * @param data\n     */\n\n  }, {\n    key: \"updateKnowledge\",\n    value: function () {\n      var _updateKnowledge = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, data) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", httpProvider.patch(\"/knowledge/\".concat(id), data));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateKnowledge(_x2, _x3) {\n        return _updateKnowledge.apply(this, arguments);\n      }\n\n      return updateKnowledge;\n    }()\n    /**\n     * 获取所有知识库（不包含章节）\n     */\n\n  }, {\n    key: \"getKnowledges\",\n    value: function () {\n      var _getKnowledges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var params,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                params = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                return _context3.abrupt(\"return\", httpProvider.get('/knowledge', {\n                  params: params\n                }));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getKnowledges() {\n        return _getKnowledges.apply(this, arguments);\n      }\n\n      return getKnowledges;\n    }()\n    /**\n     * 获取知识详情（如果是知识库，包含所有章节）\n     * @param id\n     */\n\n  }, {\n    key: \"getKnowledge\",\n    value: function () {\n      var _getKnowledge = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", httpProvider.get(\"/knowledge/\".concat(id)));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getKnowledge(_x4) {\n        return _getKnowledge.apply(this, arguments);\n      }\n\n      return getKnowledge;\n    }()\n    /**\n     * 更新知识阅读量\n     * @param id\n     * @param data\n     */\n\n  }, {\n    key: \"updateKnowledgeViews\",\n    value: function () {\n      var _updateKnowledgeViews = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", httpProvider.post(\"/knowledge/\".concat(id, \"/views\")));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function updateKnowledgeViews(_x5) {\n        return _updateKnowledgeViews.apply(this, arguments);\n      }\n\n      return updateKnowledgeViews;\n    }()\n  }]);\n\n  return KnowledgeProvider;\n}();","map":null,"metadata":{},"sourceType":"module"}