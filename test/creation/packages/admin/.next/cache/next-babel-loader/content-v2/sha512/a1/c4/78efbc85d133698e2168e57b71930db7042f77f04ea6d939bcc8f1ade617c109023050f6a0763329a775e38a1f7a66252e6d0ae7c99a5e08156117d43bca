{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable */\nimport React, { useRef, useState, useEffect } from 'react';\nimport distanceInWordsToNow from 'date-fns/formatDistanceToNow';\nimport dateFormat from 'date-fns/format';\nconst locales = {\n  zh: require(`date-fns/locale/zh-CN`)\n};\nlet callbacks = [];\nsetInterval(() => {\n  callbacks.forEach(cb => cb());\n}, 1000 * 60);\n\nfunction eachMinute(fn) {\n  callbacks.push(fn);\n  return () => {\n    callbacks = callbacks.filter(cb => cb !== fn);\n  };\n}\n\nconst getTimeago = date => {\n  let content = distanceInWordsToNow(new Date(date), {\n    addSuffix: true,\n    locale: locales.zh\n  });\n  content = content.replace('about', '').replace('less than a minute ago', 'just now').replace('minute', 'min');\n  return content;\n};\n\nexport const LocaleTime = ({\n  date,\n  timeago,\n  format = 'yyyy-MM-dd HH:mm:ss'\n}) => {\n  const {\n    1: setMinutesMounted\n  } = useState(0); // eslint-disable-line no-unused-vars\n\n  const callback = useRef();\n  useEffect(() => {\n    callback.current = eachMinute(() => {\n      setMinutesMounted(state => ++state);\n    });\n    return () => {\n      if (callback.current) {\n        callback.current();\n      }\n    };\n  }, []);\n  const formated = dateFormat(new Date(date), format);\n  return __jsx(\"time\", {\n    dateTime: formated\n  }, timeago ? getTimeago(date) : formated);\n};","map":null,"metadata":{},"sourceType":"module"}