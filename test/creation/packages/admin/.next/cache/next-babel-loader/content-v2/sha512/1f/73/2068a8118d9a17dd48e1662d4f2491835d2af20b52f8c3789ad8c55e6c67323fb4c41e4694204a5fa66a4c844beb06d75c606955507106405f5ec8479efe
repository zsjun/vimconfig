{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _extends from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/extends\";\nimport \"antd/lib/alert/style\";\nimport _Alert from \"antd/lib/alert\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _slicedToArray from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport Link from 'next/link';\nimport { useSetting } from '@/hooks/useSetting';\nimport { AdminLayout } from '@/layout/AdminLayout';\nimport { MailProvider } from '@/providers/mail';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport { useAsyncLoading } from '@/hooks/useAsyncLoading';\nimport { usePagination } from '@/hooks/usePagination';\nimport { PaginationTable } from '@/components/PaginationTable';\nimport style from './index.module.scss';\nvar SCROLL = {\n  x: 1440\n};\nvar SEARCH_FIELDS = [{\n  label: '发件人',\n  field: 'from',\n  msg: '请输入发件人'\n}, {\n  label: '收件人',\n  field: 'to',\n  msg: '请输入收件人'\n}, {\n  label: '主题',\n  field: 'subject',\n  msg: '请输入主题'\n}];\nvar COMMON_COLUMNS = [{\n  title: '发件人',\n  dataIndex: 'from',\n  key: 'from'\n}, {\n  title: '收件人',\n  dataIndex: 'to',\n  key: 'to'\n}, {\n  title: '主题',\n  dataIndex: 'subject',\n  key: 'subject'\n}];\nvar TIME_COLUMN = {\n  title: '发送时间',\n  dataIndex: 'createAt',\n  key: 'createAt',\n  render: function render(date) {\n    return __jsx(LocaleTime, {\n      date: date\n    });\n  }\n};\n\nvar Mail = function Mail() {\n  var setting = useSetting();\n\n  var _usePagination = usePagination(MailProvider.getMails),\n      loading = _usePagination.loading,\n      mails = _usePagination.data,\n      refresh = _usePagination.refresh,\n      resetPagination = _objectWithoutProperties(_usePagination, [\"loading\", \"data\", \"refresh\"]);\n\n  var _useAsyncLoading = useAsyncLoading(MailProvider.deleteMail),\n      _useAsyncLoading2 = _slicedToArray(_useAsyncLoading, 2),\n      deleteApi = _useAsyncLoading2[0],\n      deleteLoading = _useAsyncLoading2[1];\n\n  var _useState = useState(null),\n      selectedMail = _useState[0],\n      setSelectedMail = _useState[1];\n\n  var isSmtpSettingFullfilled = useMemo(function () {\n    return setting && setting.smtpHost && setting.smtpPort && setting.smtpUser && setting.smtpFromUser && setting.smtpFromUser;\n  }, [setting]);\n  var deleteAction = useCallback(function (ids) {\n    var resetSelectedRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    return function () {\n      Promise.all(ids.map(function (id) {\n        return deleteApi(id);\n      })).then(function () {\n        _message.success('操作成功');\n\n        resetSelectedRows && resetSelectedRows();\n        refresh();\n      });\n    };\n  }, [deleteApi, refresh]);\n  var contentColumn = [{\n    title: '内容',\n    dataIndex: 'html',\n    key: 'html',\n    render: function render(_, record) {\n      return __jsx(_Button, {\n        type: \"link\",\n        style: {\n          paddingLeft: 0\n        },\n        onClick: function onClick() {\n          setSelectedMail(record);\n        }\n      }, \"\\u70B9\\u51FB\\u67E5\\u770B\");\n    }\n  }];\n\n  var actionColumn = function actionColumn(resetSelectedRows) {\n    return {\n      title: '操作',\n      key: 'action',\n      render: function render(_, record) {\n        return __jsx(\"span\", {\n          className: style.action\n        }, __jsx(_Popconfirm, {\n          title: \"\\u786E\\u8BA4\\u5220\\u9664\\u8FD9\\u4E2A\\u90AE\\u4EF6\\uFF1F\",\n          onConfirm: deleteAction(record.id, resetSelectedRows),\n          okText: \"\\u786E\\u8BA4\",\n          cancelText: \"\\u53D6\\u6D88\"\n        }, __jsx(\"a\", null, \"\\u5220\\u9664\")));\n      }\n    };\n  };\n\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: style.wrapper\n  }, !isSmtpSettingFullfilled ? __jsx(\"div\", {\n    style: {\n      marginBottom: 24\n    }\n  }, __jsx(_Alert, {\n    message: __jsx(\"span\", null, \"\\u7CFB\\u7EDF\\u68C0\\u6D4B\\u5230\", __jsx(\"strong\", null, \"SMTP \\u914D\\u7F6E\"), \"\\u672A\\u5B8C\\u5584\\uFF0C\\u5F53\\u6536\\u5230\\u8BC4\\u8BBA\\u65F6\\uFF0C\\u65E0\\u6CD5\\u8FDB\\u884C\\u90AE\\u4EF6\\u901A\\u77E5\\u3002\", __jsx(Link, {\n      href: \"/setting?type=SMTP%20\\u670D\\u52A1\"\n    }, __jsx(\"a\", null, \"\\u70B9\\u6211\\u7ACB\\u5373\\u5B8C\\u5584\"))),\n    type: \"warning\"\n  })) : null, __jsx(PaginationTable, _extends({\n    showSelection: true,\n    loading: loading,\n    data: mails,\n    columns: function columns(resetSelectedRows) {\n      return [].concat(COMMON_COLUMNS, [contentColumn, TIME_COLUMN, actionColumn(resetSelectedRows)]);\n    },\n    refresh: refresh\n  }, resetPagination, {\n    renderLeftNode: function renderLeftNode(_ref) {\n      var hasSelected = _ref.hasSelected,\n          selectedRowKeys = _ref.selectedRowKeys,\n          resetSelectedRows = _ref.resetSelectedRows;\n      return hasSelected ? __jsx(_Popconfirm, {\n        title: \"\\u786E\\u8BA4\\u5220\\u9664\\uFF1F\",\n        onConfirm: deleteAction(selectedRowKeys, resetSelectedRows),\n        okText: \"\\u786E\\u8BA4\",\n        cancelText: \"\\u53D6\\u6D88\"\n      }, __jsx(_Button, {\n        disabled: !hasSelected,\n        loading: deleteLoading,\n        danger: true\n      }, \"\\u5220\\u9664\")) : null;\n    },\n    scroll: SCROLL,\n    searchFields: SEARCH_FIELDS\n  })), __jsx(_Modal, {\n    title: '发送内容',\n    visible: selectedMail,\n    footer: null,\n    width: 786 + 48,\n    onCancel: function onCancel() {\n      setSelectedMail(null);\n    },\n    transitionName: '',\n    maskTransitionName: ''\n  }, __jsx(\"div\", {\n    className: \"markdown\",\n    style: {\n      overflow: 'auto !important'\n    },\n    dangerouslySetInnerHTML: {\n      __html: selectedMail && selectedMail.html\n    }\n  }))));\n};\n\nexport default Mail;","map":null,"metadata":{},"sourceType":"module"}