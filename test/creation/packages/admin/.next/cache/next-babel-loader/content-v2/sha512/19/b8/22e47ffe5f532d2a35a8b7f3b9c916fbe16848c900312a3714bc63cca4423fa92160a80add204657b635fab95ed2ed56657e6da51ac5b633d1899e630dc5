{"ast":null,"code":"import \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/tooltip/style\";\nimport _Tooltip from \"antd/lib/tooltip\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef, useMemo } from 'react';\nimport cls from 'classnames';\nimport { CloseOutlined } from '@ant-design/icons';\nimport { useToggle } from '@/hooks/useToggle';\nimport { DEFAULT_MARKDOWN } from './DefaultMarkdown';\nimport { toolbar } from './toolbar';\nimport { MonacoEditor } from './MonacoEditor';\nimport { Preview } from './Preview';\nimport { confirm } from './utils/modal';\nimport { makeHtml, makeToc } from './utils/markdown';\nimport style from './index.module.scss';\nimport { Toc } from '../Toc';\nconst CACHE_KEY = 'MONACO_CONTENT_STORAGE';\nlet timer;\nexport const Editor = ({\n  defaultValue = DEFAULT_MARKDOWN,\n  onChange\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const editorRef = useRef();\n  const editorContainerRef = useRef();\n  const {\n    0: innerValue,\n    1: setInnerValue\n  } = useState(defaultValue);\n  const {\n    0: mode,\n    1: setMode\n  } = useState('edit');\n  const {\n    0: two,\n    1: setTwo\n  } = useState(true);\n  const {\n    0: saveState,\n    1: setSaveState\n  } = useState(false);\n  const [tocVisible, toggleTocVisible] = useToggle(true);\n  const {\n    0: tocs,\n    1: setTocs\n  } = useState([]);\n  const {\n    0: fullWidth,\n    1: halfWidth\n  } = useMemo(() => {\n    return [tocVisible ? '80%' : '100%', tocVisible ? '40%' : '50%'];\n  }, [tocVisible]);\n  const toggleMode = useCallback(() => {\n    setMode(mode => mode === 'preview' ? 'edit' : 'preview');\n  }, []);\n  const toggleTwo = useCallback(() => {\n    setTwo(v => !v);\n  }, []);\n  const toggleSaveState = useCallback(() => {\n    setSaveState(v => {\n      const nextValue = !v;\n\n      if (nextValue) {\n        timer = setTimeout(toggleSaveState, 2000);\n      }\n\n      return nextValue;\n    });\n  }, []);\n  const saveCache = useCallback(value => {\n    localStorage.setItem(CACHE_KEY, value);\n    toggleSaveState();\n  }, [toggleSaveState]);\n  useEffect(() => {\n    const html = makeHtml(innerValue);\n    const tocs = makeToc(html);\n    setTocs(tocs);\n    onChange({\n      value: innerValue,\n      html,\n      toc: JSON.stringify(tocs)\n    });\n  }, [innerValue, onChange]);\n  useEffect(() => {\n    const listener = evt => {\n      const handle = value => {\n        setInnerValue(value);\n        editorRef.current && editorRef.current.setValue(value);\n      };\n\n      if (evt.data.id !== 'editor-mounted') {\n        return;\n      }\n\n      const cache = localStorage.getItem(CACHE_KEY);\n\n      if (cache && defaultValue === DEFAULT_MARKDOWN) {\n        confirm().then(() => handle(cache)).catch(() => handle(defaultValue));\n      } else {\n        handle(defaultValue);\n      }\n\n      window.removeEventListener('message', listener);\n    };\n\n    window.addEventListener('message', listener);\n    return () => {\n      window.removeEventListener('message', listener);\n    };\n  }, [defaultValue]);\n  useEffect(() => {\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n  useEffect(() => {\n    if (!editorRef.current || !editorContainerRef.current) {\n      return;\n    }\n\n    if (!two && mode === 'preview') {\n      return;\n    }\n\n    editorRef.current.layout(editorContainerRef.current.getBoundingClientRect());\n  }, [two, mode, tocVisible]);\n  return __jsx(\"div\", {\n    className: cls(style.wrapper)\n  }, __jsx(\"header\", null, __jsx(\"div\", null, toolbar.map(tool => {\n    return __jsx(\"span\", {\n      key: tool.label,\n      className: style.toolWrap,\n      onClick: tool.getAction(editorRef.current)\n    }, __jsx(_Tooltip, {\n      title: tool.label\n    }, __jsx(tool.content, {\n      editor: editorRef.current\n    })));\n  }), __jsx(\"span\", {\n    style: {\n      opacity: saveState ? 1 : 0\n    }\n  }, \"\\u5DF2\\u4FDD\\u5B58\\u5230\\u672C\\u5730\")), __jsx(\"div\", null, __jsx(\"span\", {\n    className: style.modeWrapper\n  }, __jsx(\"span\", null, \"\\u5F53\\u524D\\u6A21\\u5F0F\\uFF1A\"), __jsx(\"span\", {\n    onClick: toggleMode\n  }, mode === 'preview' ? '预览' : '编辑')), __jsx(_Divider, {\n    type: \"vertical\"\n  }), __jsx(\"span\", {\n    onClick: toggleTwo\n  }, two ? '退出' : '', \"\\u4E24\\u680F\\u663E\\u793A\"), __jsx(_Divider, {\n    type: \"vertical\"\n  }), __jsx(\"span\", {\n    onClick: toggleTocVisible\n  }, __jsx(\"span\", null, \"\\u5927\\u7EB2\")))), __jsx(\"main\", null, __jsx(\"div\", {\n    ref: editorContainerRef,\n    style: {\n      width: two ? halfWidth : mode === 'preview' ? 0 : fullWidth,\n      overflow: 'hidden'\n    }\n  }, __jsx(MonacoEditor, {\n    ref: editorRef,\n    defaultValue: defaultValue,\n    onChange: setInnerValue,\n    onSave: saveCache\n  })), __jsx(\"div\", {\n    style: {\n      width: two ? halfWidth : mode === 'edit' ? 0 : fullWidth\n    }\n  }, __jsx(Preview, {\n    value: innerValue\n  })), __jsx(\"div\", {\n    style: {\n      width: tocVisible ? '20%' : 0\n    }\n  }, __jsx(\"div\", {\n    className: style.tocWrapper\n  }, __jsx(\"header\", null, __jsx(\"span\", null, \"\\u5927\\u7EB2\"), __jsx(\"span\", {\n    onClick: toggleTocVisible\n  }, __jsx(CloseOutlined, null))), __jsx(\"main\", null, __jsx(Toc, {\n    tocs: tocs\n  }))))));\n};","map":null,"metadata":{},"sourceType":"module"}