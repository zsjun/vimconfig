{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/tag/style\";\nimport _Tag from \"antd/lib/tag\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { getRandomColor } from '@/constants';\nimport { resolveUrl } from '@/utils';\nimport { useAsyncLoading } from '@/hooks/useAsyncLoading';\nimport { usePagination } from '@/hooks/usePagination';\nimport { useSetting } from '@/hooks/useSetting';\nimport { useToggle } from '@/hooks/useToggle';\nimport { AdminLayout } from '@/layout/AdminLayout';\nimport { ArticleProvider } from '@/providers/article';\nimport { ViewProvider } from '@/providers/view';\nimport { CategoryProvider } from '@/providers/category';\nimport { ViewChart } from '@/components/ViewChart';\nimport { PaginationTable } from '@/components/PaginationTable';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport style from './index.module.scss';\nlet updateLoadingMessage = null;\nconst SCROLL = {\n  x: 1380\n};\nconst SEARCH_FIELDS = [{\n  label: '标题',\n  field: 'title',\n  msg: '请输入文章标题'\n}, {\n  label: '状态',\n  field: 'status',\n  children: __jsx(_Select, {\n    style: {\n      width: 180\n    }\n  }, [{\n    label: '已发布',\n    value: 'publish'\n  }, {\n    label: '草稿',\n    value: 'draft'\n  }].map(t => {\n    return __jsx(_Select.Option, {\n      key: t.label,\n      value: t.value\n    }, t.label);\n  }))\n}];\nconst COMMON_COLUMNS = [{\n  title: '状态',\n  dataIndex: 'status',\n  width: 100,\n  key: 'status',\n  render: status => {\n    const isDraft = status === 'draft';\n    return __jsx(_Badge, {\n      color: isDraft ? 'gold' : 'green',\n      text: isDraft ? '草稿' : '已发布'\n    });\n  }\n}, {\n  title: '分类',\n  key: 'category',\n  dataIndex: 'category',\n  width: 100,\n  render: category => category ? __jsx(\"span\", null, __jsx(_Tag, {\n    color: getRandomColor(category.label),\n    key: category.value\n  }, category.label)) : null\n}, {\n  title: '标签',\n  key: 'tags',\n  dataIndex: 'tags',\n  width: 200,\n  render: tags => __jsx(\"span\", null, tags.map(tag => {\n    return __jsx(_Tag, {\n      color: getRandomColor(tag.label),\n      key: tag.label\n    }, tag.label);\n  }))\n}, {\n  title: '阅读量',\n  dataIndex: 'views',\n  key: 'views',\n  width: 120,\n  render: views => __jsx(_Badge, {\n    count: views,\n    showZero: true,\n    overflowCount: Infinity,\n    style: {\n      backgroundColor: '#52c41a'\n    }\n  })\n}, {\n  title: '喜欢数',\n  dataIndex: 'likes',\n  key: 'likes',\n  width: 120,\n  render: val => __jsx(_Badge, {\n    count: val,\n    showZero: true,\n    overflowCount: Infinity,\n    style: {\n      backgroundColor: '#eb2f96'\n    }\n  })\n}, {\n  title: '发布时间',\n  dataIndex: 'publishAt',\n  key: 'publishAt',\n  width: 200,\n  render: date => __jsx(LocaleTime, {\n    date: date\n  })\n}];\n\nconst Article = () => {\n  const setting = useSetting();\n  const [modalVisible, toggleModalVisible] = useToggle(false);\n  const {\n    0: views,\n    1: setViews\n  } = useState([]);\n  const {\n    0: categorys,\n    1: setCategorys\n  } = useState([]);\n\n  const _usePagination = usePagination(ArticleProvider.getArticles),\n        {\n    loading: listLoading,\n    data: articles,\n    refresh\n  } = _usePagination,\n        resetPagination = _objectWithoutProperties(_usePagination, [\"loading\", \"data\", \"refresh\"]);\n\n  const [updateApi, updateLoading] = useAsyncLoading(ArticleProvider.updateArticle);\n  const [deleteAPi, deleteLoading] = useAsyncLoading(ArticleProvider.deleteArticle);\n  const [getViewsByUrlApi, getViewsLoading] = useAsyncLoading(ViewProvider.getViewsByUrl);\n  const updateAction = useCallback((articles, key, value = null) => {\n    if (!Array.isArray(articles)) {\n      articles = [articles];\n    }\n\n    return () => Promise.all(articles.map(article => updateApi(article.id, {\n      [key]: value !== null ? value : !article[key]\n    }))).then(() => {\n      _message.success('操作成功');\n\n      refresh();\n    });\n  }, [updateApi, refresh]);\n  const deleteAction = useCallback((ids, resetSelectedRows = null) => {\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    return () => {\n      Promise.all(ids.map(id => deleteAPi(id))).then(() => {\n        _message.success('操作成功');\n\n        refresh();\n        resetSelectedRows && resetSelectedRows();\n      });\n    };\n  }, [deleteAPi, refresh]);\n  const getViews = useCallback(url => {\n    toggleModalVisible();\n    getViewsByUrlApi(url).then(res => {\n      setViews(res);\n    });\n  }, [toggleModalVisible, getViewsByUrlApi]);\n  const closeViewModal = useCallback(() => {\n    toggleModalVisible();\n    setViews([]);\n  }, [toggleModalVisible]);\n  const titleColumn = {\n    title: '标题',\n    dataIndex: 'title',\n    key: 'title',\n    fixed: 'left',\n    width: 200,\n    render: (text, record) => __jsx(\"a\", {\n      href: resolveUrl(setting.systemUrl, `/article/${record.id}`),\n      target: \"_blank\",\n      rel: \"noreferrer\"\n    }, text)\n  };\n\n  const actionColumn = resetSelectedRows => ({\n    title: '操作',\n    key: 'action',\n    fixed: 'right',\n    render: (_, record) => __jsx(\"span\", {\n      className: style.action\n    }, __jsx(Link, {\n      href: `/article/editor/[id]`,\n      as: `/article/editor/` + record.id\n    }, __jsx(\"a\", null, __jsx(_Button, {\n      type: \"link\",\n      size: 'small'\n    }, \"\\u7F16\\u8F91\"))), __jsx(_Divider, {\n      type: \"vertical\"\n    }), __jsx(_Button, {\n      type: \"link\",\n      size: 'small',\n      onClick: updateAction(record, 'isRecommended')\n    }, record.isRecommended ? '撤销首焦' : '首焦推荐'), __jsx(_Divider, {\n      type: \"vertical\"\n    }), __jsx(_Button, {\n      type: \"link\",\n      size: 'small',\n      onClick: () => getViews(resolveUrl(setting.systemUrl, '/article/' + record.id))\n    }, \"\\u67E5\\u770B\\u8BBF\\u95EE\"), __jsx(_Divider, {\n      type: \"vertical\"\n    }), __jsx(_Popconfirm, {\n      title: \"\\u786E\\u8BA4\\u5220\\u9664\\u8FD9\\u4E2A\\u6587\\u7AE0\\uFF1F\",\n      onConfirm: deleteAction(record.id, resetSelectedRows),\n      okText: \"\\u786E\\u8BA4\",\n      cancelText: \"\\u53D6\\u6D88\",\n      okButtonProps: {\n        loading: deleteLoading\n      }\n    }, __jsx(_Button, {\n      type: \"link\",\n      size: 'small'\n    }, \"\\u5220\\u9664\")))\n  });\n\n  useEffect(() => {\n    CategoryProvider.getCategory().then(res => setCategorys(res));\n  }, []);\n  useEffect(() => {\n    if (updateLoading) {\n      updateLoadingMessage = _message.loading('操作中...', 0);\n    } else {\n      updateLoadingMessage && updateLoadingMessage();\n    }\n  }, [updateLoading]);\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: style.wrapper\n  }, __jsx(PaginationTable, _extends({\n    showSelection: true,\n    loading: listLoading,\n    data: articles,\n    columns: resetSelectedRows => [titleColumn, ...COMMON_COLUMNS, actionColumn(resetSelectedRows)]\n  }, resetPagination, {\n    refresh: refresh,\n    renderLeftNode: ({\n      hasSelected,\n      selectedRowKeys,\n      selectedRows,\n      resetSelectedRows\n    }) => hasSelected ? __jsx(React.Fragment, null, __jsx(_Button, {\n      disabled: !hasSelected,\n      style: {\n        marginRight: 8\n      },\n      onClick: updateAction(selectedRows, 'status', 'publish')\n    }, \"\\u53D1\\u5E03\"), __jsx(_Button, {\n      disabled: !hasSelected,\n      style: {\n        marginRight: 8\n      },\n      onClick: updateAction(selectedRows, 'status', 'draft')\n    }, \"\\u8349\\u7A3F\"), __jsx(_Button, {\n      disabled: !hasSelected,\n      style: {\n        marginRight: 8\n      },\n      onClick: updateAction(selectedRows, 'isRecommended', true)\n    }, \"\\u9996\\u7126\\u63A8\\u8350\"), __jsx(_Button, {\n      disabled: !hasSelected,\n      style: {\n        marginRight: 8\n      },\n      onClick: updateAction(selectedRows, 'isRecommended', false)\n    }, \"\\u64A4\\u9500\\u9996\\u7126\"), __jsx(_Popconfirm, {\n      title: \"\\u786E\\u8BA4\\u5220\\u9664\\uFF1F\",\n      onConfirm: deleteAction(selectedRowKeys, resetSelectedRows),\n      okText: \"\\u786E\\u8BA4\",\n      cancelText: \"\\u53D6\\u6D88\"\n    }, __jsx(_Button, {\n      disabled: !hasSelected,\n      loading: deleteLoading,\n      danger: true\n    }, \"\\u5220\\u9664\"))) : null,\n    rightNode: __jsx(Link, {\n      href: '/article/editor'\n    }, __jsx(\"a\", null, __jsx(_Button, {\n      type: \"primary\"\n    }, __jsx(PlusOutlined, null), \"\\u65B0\\u5EFA\"))),\n    scroll: SCROLL,\n    searchFields: [...SEARCH_FIELDS, {\n      label: '分类',\n      field: 'category',\n      children: __jsx(_Select, {\n        style: {\n          width: 180\n        }\n      }, categorys.map(t => __jsx(_Select.Option, {\n        key: t.id,\n        value: t.id\n      }, t.label)))\n    }]\n  })), __jsx(_Modal, {\n    title: \"\\u8BBF\\u95EE\\u7EDF\\u8BA1\",\n    visible: modalVisible,\n    width: 640,\n    onCancel: closeViewModal,\n    maskClosable: false,\n    footer: null,\n    transitionName: '',\n    maskTransitionName: ''\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(_Spin, {\n    spinning: getViewsLoading\n  }, __jsx(ViewChart, {\n    data: views\n  }))))));\n};\n\nexport default Article;","map":null,"metadata":{},"sourceType":"module"}