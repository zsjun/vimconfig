{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport { Form } from '@ant-design/compatible';\nimport style from './index.module.scss';\n\nvar _Search = function _Search(_ref) {\n  var form = _ref.form,\n      _ref$fields = _ref.fields,\n      fields = _ref$fields === void 0 ? [] : _ref$fields,\n      _ref$showLabel = _ref.showLabel,\n      showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 12 : _ref$padding,\n      onSearch = _ref.onSearch;\n\n  var getFields = function getFields() {\n    var getFieldDecorator = form.getFieldDecorator;\n    var children = [];\n\n    var _iterator = _createForOfIteratorHelper(fields),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var field = _step.value;\n        children.push(__jsx(_Col, {\n          xs: 24,\n          sm: 12,\n          md: 6,\n          key: field.field\n        }, __jsx(Form.Item, showLabel ? {\n          label: field.label,\n          labelCol: {\n            xs: {\n              span: 24\n            },\n            sm: {\n              span: 12\n            },\n            md: {\n              span: 6\n            }\n          }\n        } : {}, getFieldDecorator(field.field, {\n          rules: field.rules\n        })(field.children ? field.children : __jsx(_Input, {\n          width: '100%',\n          placeholder: field.msg || 'placeholder'\n        })))));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return children;\n  };\n\n  var handleSearch = function handleSearch(e) {\n    e.preventDefault();\n    form.validateFields(function (_, values) {\n      onSearch(values);\n    });\n  };\n\n  var handleReset = function handleReset() {\n    form.resetFields();\n  };\n\n  var submitContent = __jsx(Form.Item, null, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"\\u641C\\u7D22\"), __jsx(_Button, {\n    style: {\n      marginLeft: 8\n    },\n    onClick: handleReset\n  }, \"\\u91CD\\u7F6E\"));\n\n  return __jsx(Form, {\n    className: style.wrapper,\n    style: {\n      padding: padding\n    },\n    layout: \"inline\",\n    onSubmit: handleSearch\n  }, __jsx(_Row, {\n    gutter: 24\n  }, getFields()), __jsx(_Row, {\n    gutter: 24\n  }, __jsx(_Col, {\n    span: 24,\n    style: {\n      textAlign: 'right'\n    }\n  }, submitContent)));\n};\n\nexport var Search = Form.create({\n  name: 'advanced_search'\n})(_Search);","map":null,"metadata":{},"sourceType":"module"}