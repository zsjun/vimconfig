{"ast":null,"code":"import \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\nimport React, { forwardRef, useRef, useEffect, useState, useCallback, useImperativeHandle } from 'react';\nimport { FileProvider } from '@/providers/file';\nimport { registerScollListener, subjectScrollListener, removeScrollListener } from './utils/syncScroll';\nexport let monaco = null;\nconst IMG_REXEXP = /^image\\/(png|jpg|jpeg|gif)$/i;\n\nconst _MonacoEditor = (props, ref) => {\n  const {\n    defaultValue,\n    onChange,\n    onSave\n  } = props;\n  const container = useRef(null);\n  const editorRef = useRef(null);\n  const {\n    0: mounted,\n    1: setMounted\n  } = useState(false);\n  const registerChange = useCallback(() => {\n    editorRef.current.onDidChangeModelContent(() => {\n      const content = editorRef.current.getValue();\n      onChange(content);\n    });\n  }, [onChange]);\n  const registerScroll = useCallback(() => {\n    editorRef.current.onDidScrollChange(registerScollListener('editor', () => {\n      const top = editorRef.current.getScrollTop() / (editorRef.current.getContentHeight() - editorRef.current.getLayoutInfo().height);\n      return {\n        id: 'editor-scroll',\n        top: top,\n        left: editorRef.current.getScrollLeft()\n      };\n    }));\n  }, []);\n  const registerSave = useCallback(() => {\n    // eslint-disable-next-line no-bitwise\n    editorRef.current.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, () => {\n      onSave(editorRef.current.getValue());\n    });\n  }, [onSave]);\n  const notifyMounted = useCallback(() => {\n    window.postMessage({\n      id: 'editor-mounted'\n    }, window.location.href);\n  }, []);\n  useImperativeHandle(ref, () => editorRef.current, [mounted]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    Promise.all([import('monaco-editor/esm/vs/editor/editor.api.js'), import('monaco-markdown')]).then(res => {\n      monaco = res[0];\n      const MonacoMarkdown = res[1];\n      const editor = monaco.editor.create(container.current, {\n        language: 'markdown',\n        automaticLayout: true,\n        wordWrap: 'on',\n        theme: 'vs',\n        minimap: {\n          enabled: false\n        },\n        scrollBeyondLastLine: false,\n        scrollbar: {\n          useShadows: false,\n          vertical: 'visible',\n          horizontal: 'visible',\n          verticalScrollbarSize: 6,\n          horizontalScrollbarSize: 6\n        }\n      });\n      editorRef.current = editor;\n      const extension = new MonacoMarkdown.MonacoMarkdownExtension();\n      extension.activate(editor);\n      registerScroll();\n      registerChange();\n      registerSave();\n      notifyMounted();\n      setMounted(true);\n    });\n    return () => {\n      setMounted(false);\n      editorRef.current && editorRef.current.dispose();\n    };\n  }, [registerScroll, registerChange, registerSave, notifyMounted]);\n  useEffect(() => {\n    if (!mounted) {\n      return undefined;\n    }\n\n    const listener = ({\n      top,\n      left\n    }) => {\n      editorRef.current.setScrollTop(top * editorRef.current.getContentHeight());\n      editorRef.current.setScrollLeft(left);\n    };\n\n    subjectScrollListener('editor', 'preview', listener);\n    return () => {\n      removeScrollListener('preview', listener);\n    };\n  }, [mounted]);\n  useEffect(() => {\n    if (!mounted) {\n      return undefined;\n    }\n\n    const editor = editorRef.current;\n    const clearRef = {\n      current: () => {\n        return undefined;\n      }\n    };\n    editor.onDidPaste(e => {\n      const pastePosition = e.range;\n      const delta = [{\n        range: new monaco.Range(pastePosition.startLineNumber, pastePosition.startColumn, pastePosition.endLineNumber, pastePosition.endColumn),\n        text: ``\n      }];\n\n      clearRef.current = () => {\n        editor.executeEdits('', delta);\n      };\n    });\n\n    const onPaste = async e => {\n      const selection = editor.getSelection();\n      const items = e.clipboardData.items;\n      const imgFiles = Array.from(items).filter(item => item.type.match(IMG_REXEXP)).map(item => item.getAsFile());\n\n      if (!imgFiles.length) {\n        return;\n      }\n\n      const hide = _message.loading('正在上传图片中', 0);\n\n      const upload = file => {\n        return FileProvider.uploadFile(file, 1).then(({\n          url\n        }) => {\n          const delta = [{\n            range: new monaco.Range(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn),\n            text: `![${file.name}](${url})`\n          }];\n          editor.executeEdits('', delta);\n          const {\n            endLineNumber,\n            endColumn\n          } = editor.getSelection();\n          editor.setPosition({\n            lineNumber: endLineNumber,\n            column: endColumn\n          });\n        });\n      };\n\n      await Promise.all(imgFiles.map(upload));\n      hide();\n      clearRef.current();\n    };\n\n    window.addEventListener('paste', onPaste);\n    return () => {\n      window.removeEventListener('paste', onPaste);\n    };\n  }, [mounted]);\n  useEffect(() => {\n    if (!mounted || !editorRef.current) {\n      return;\n    }\n\n    editorRef.current.setValue(defaultValue);\n  }, [mounted, defaultValue]);\n  return __jsx(\"div\", {\n    ref: container,\n    style: {\n      height: '100%',\n      overflow: 'hidden'\n    }\n  }, mounted ? null : __jsx(_Spin, {\n    tip: \"\\u7F16\\u8F91\\u5668\\u52AA\\u529B\\u52A0\\u8F7D\\u4E2D...\",\n    spinning: true\n  }));\n};\n\nexport const MonacoEditor = /*#__PURE__*/forwardRef(_MonacoEditor);","map":null,"metadata":{},"sourceType":"module"}