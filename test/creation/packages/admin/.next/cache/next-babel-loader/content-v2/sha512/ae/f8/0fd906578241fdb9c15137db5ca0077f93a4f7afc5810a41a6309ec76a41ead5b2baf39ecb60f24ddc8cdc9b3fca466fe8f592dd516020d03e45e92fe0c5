{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useEffect } from 'react';\nimport { AdminLayout } from '@/layout/AdminLayout';\nimport { UserProvider } from '@/providers/user';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport { useAsyncLoading } from '@/hooks/useAsyncLoading';\nimport { usePagination } from '@/hooks/usePagination';\nimport { PaginationTable } from '@/components/PaginationTable';\nimport style from './index.module.scss';\nlet updateLoadingMessage = null;\nconst COMMON_COLUMNS = [{\n  title: '账户',\n  dataIndex: 'name',\n  key: 'name',\n  width: '10%'\n}, {\n  title: '邮箱',\n  dataIndex: 'email',\n  key: 'mail',\n  width: '20%'\n}, {\n  title: '角色',\n  dataIndex: 'role',\n  key: 'role',\n  render: role => {\n    return role === 'admin' ? '管理员' : '访客';\n  }\n}, {\n  title: '状态',\n  dataIndex: 'status',\n  key: 'status',\n  render: status => {\n    const isLocked = status === 'locked';\n    return __jsx(_Badge, {\n      color: isLocked ? 'gold' : 'green',\n      text: isLocked ? '已锁定' : '可用'\n    });\n  }\n}, {\n  title: '注册日期',\n  dataIndex: 'createAt',\n  key: 'createAt',\n  render: date => __jsx(LocaleTime, {\n    date: date\n  })\n}];\nconst SEARCH_FIELDS = [{\n  label: '账户',\n  field: 'name',\n  msg: '请输入用户账户'\n}, {\n  label: '邮箱',\n  field: 'email',\n  msg: '请输入账户邮箱'\n}, {\n  label: '角色',\n  field: 'role',\n  children: __jsx(_Select, {\n    style: {\n      width: 180\n    }\n  }, [{\n    label: '管理员',\n    value: 'admin'\n  }, {\n    label: '访客',\n    value: 'visitor'\n  }].map(t => {\n    return __jsx(_Select.Option, {\n      key: t.label,\n      value: t.value\n    }, t.label);\n  }))\n}, {\n  label: '状态',\n  field: 'status',\n  children: __jsx(_Select, {\n    style: {\n      width: 180\n    }\n  }, [{\n    label: '锁定',\n    value: 'locked'\n  }, {\n    label: '可用',\n    value: 'active'\n  }].map(t => {\n    return __jsx(_Select.Option, {\n      key: t.label,\n      value: t.value\n    }, t.label);\n  }))\n}];\n\nconst Page = () => {\n  const _usePagination = usePagination(UserProvider.getUsers),\n        {\n    loading,\n    data,\n    refresh\n  } = _usePagination,\n        resetPagination = _objectWithoutProperties(_usePagination, [\"loading\", \"data\", \"refresh\"]);\n\n  const [updateApi, updateLoading] = useAsyncLoading(UserProvider.update);\n  const updateAction = useCallback((users, key, value = null) => {\n    if (!Array.isArray(users)) {\n      users = [users];\n    }\n\n    return () => Promise.all(users.map(user => updateApi(_objectSpread(_objectSpread({}, user), {}, {\n      [key]: value !== null ? value : !user[key]\n    })))).then(() => {\n      _message.success('操作成功');\n\n      refresh();\n    });\n  }, [updateApi, refresh]);\n  const actionColumn = {\n    title: '操作',\n    key: 'action',\n    render: (_, record) => {\n      const isLocked = record.status === 'locked';\n      const isAdmin = record.role === 'admin';\n      return __jsx(\"span\", {\n        className: style.action\n      }, isLocked ? __jsx(\"a\", {\n        onClick: updateAction(record, 'status', 'active')\n      }, \"\\u542F\\u7528\") : __jsx(\"a\", {\n        onClick: updateAction(record, 'status', 'locked')\n      }, \"\\u7981\\u7528\"), __jsx(_Divider, {\n        type: \"vertical\"\n      }), isAdmin ? __jsx(\"a\", {\n        onClick: updateAction(record, 'role', 'visitor')\n      }, \"\\u89E3\\u9664\\u6388\\u6743\") : __jsx(\"a\", {\n        onClick: updateAction(record, 'role', 'admin')\n      }, \"\\u6388\\u6743\"));\n    }\n  };\n  useEffect(() => {\n    if (updateLoading) {\n      updateLoadingMessage = _message.loading('操作中...', 0);\n    } else {\n      updateLoadingMessage && updateLoadingMessage();\n    }\n  }, [updateLoading]);\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: style.wrapper\n  }, __jsx(PaginationTable, _extends({\n    showSelection: true,\n    loading: loading,\n    data: data,\n    columns: [...COMMON_COLUMNS, actionColumn],\n    refresh: refresh\n  }, resetPagination, {\n    renderLeftNode: ({\n      hasSelected,\n      selectedRows\n    }) => hasSelected ? __jsx(React.Fragment, null, __jsx(_Button, {\n      style: {\n        marginRight: 8\n      },\n      disabled: !hasSelected,\n      onClick: updateAction(selectedRows, 'status', 'active')\n    }, \"\\u542F\\u7528\"), __jsx(_Button, {\n      style: {\n        marginRight: 8\n      },\n      disabled: !hasSelected,\n      onClick: updateAction(selectedRows, 'status', 'locked')\n    }, \"\\u7981\\u7528\"), __jsx(_Button, {\n      style: {\n        marginRight: 8\n      },\n      disabled: !hasSelected,\n      onClick: updateAction(selectedRows, 'role', 'visitor')\n    }, \"\\u89E3\\u9664\\u6388\\u6743\"), __jsx(_Button, {\n      disabled: !hasSelected,\n      onClick: updateAction(selectedRows, 'role', 'admin')\n    }, \"\\u6388\\u6743\")) : null,\n    searchFields: SEARCH_FIELDS\n  }))));\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}