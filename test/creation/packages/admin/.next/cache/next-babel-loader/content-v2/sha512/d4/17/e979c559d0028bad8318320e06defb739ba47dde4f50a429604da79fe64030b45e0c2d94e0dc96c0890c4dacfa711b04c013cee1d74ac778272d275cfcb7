{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/tooltip/style\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { DeleteOutlined, EditOutlined, PlusOutlined, SettingOutlined } from '@ant-design/icons';\nimport { Icon as LegacyIcon } from '@ant-design/compatible';\nimport { AdminLayout } from '@/layout/AdminLayout';\nimport { useToggle } from '@/hooks/useToggle';\nimport { useAsyncLoading } from '@/hooks/useAsyncLoading';\nimport { KnowledgeProvider } from '@/providers/knowledge';\nimport { KnowledgeSettingDrawer } from '@/components/KnowledgeSettingDrawer';\nimport { usePagination } from '@/hooks/usePagination';\nimport { PaginationTable } from '@/components/PaginationTable';\nimport style from './index.module.scss';\nconst GRID = {\n  gutter: 16,\n  xs: 1,\n  sm: 2,\n  md: 4,\n  lg: 4,\n  xl: 4,\n  xxl: 6\n};\nconst SEARCH_FIELDS = [{\n  label: '名称',\n  field: 'title',\n  msg: '请输入知识库名称'\n}, {\n  label: '状态',\n  field: 'status',\n  children: __jsx(_Select, {\n    style: {\n      width: 180\n    }\n  }, [{\n    label: '已发布',\n    value: 'publish'\n  }, {\n    label: '草稿',\n    value: 'draft'\n  }].map(t => {\n    return __jsx(_Select.Option, {\n      key: t.label,\n      value: t.value\n    }, t.label);\n  }))\n}];\n\nconst Page = () => {\n  const [visible, toggleVisible] = useToggle(false);\n  const {\n    0: selectedBook,\n    1: setSelectedBook\n  } = useState(null);\n\n  const _usePagination = usePagination(KnowledgeProvider.getKnowledges),\n        {\n    loading: getLoading,\n    data: books,\n    refresh\n  } = _usePagination,\n        resetPagination = _objectWithoutProperties(_usePagination, [\"loading\", \"data\", \"refresh\"]);\n\n  const [updateBookApi] = useAsyncLoading(KnowledgeProvider.updateKnowledge);\n  const [deleteKnowledgeApi] = useAsyncLoading(KnowledgeProvider.deleteKnowledge);\n  const editBook = useCallback(book => {\n    setSelectedBook(book);\n    toggleVisible();\n  }, [toggleVisible]);\n  const toggleBookStatus = useCallback(book => {\n    updateBookApi(book.id, {\n      status: book.status === 'draft' ? 'publish' : 'draft'\n    }).then(() => {\n      refresh();\n    });\n  }, [updateBookApi, refresh]);\n  const deleteBook = useCallback(book => {\n    deleteKnowledgeApi(book.id).then(() => {\n      refresh();\n    });\n  }, [deleteKnowledgeApi, refresh]);\n  useEffect(() => {\n    if (!visible && selectedBook) {\n      setSelectedBook(null);\n    }\n  }, [visible, selectedBook]);\n  const renderBook = useCallback(book => __jsx(_List.Item, {\n    key: book.id\n  }, __jsx(_Card, {\n    loading: getLoading,\n    style: {\n      width: '100%'\n    },\n    cover: __jsx(\"img\", {\n      className: style.cover,\n      alt: book.title,\n      src: book.cover\n    }),\n    actions: [__jsx(Link, {\n      key: \"edit\",\n      href: `/knowledge/editor/[id]`,\n      as: `/knowledge/editor/` + book.id\n    }, __jsx(\"a\", null, __jsx(EditOutlined, {\n      key: \"edit\"\n    }))), __jsx(_Tooltip, {\n      key: \"status\",\n      title: book.status === 'draft' ? '发布线上' : '设为草稿'\n    }, __jsx(LegacyIcon, {\n      onClick: () => toggleBookStatus(book),\n      type: book.status === 'draft' ? 'cloud-upload' : 'cloud-download'\n    })), __jsx(SettingOutlined, {\n      key: \"setting\",\n      onClick: () => editBook(book)\n    }), __jsx(_Popconfirm, {\n      key: \"delete\",\n      title: \"\\u786E\\u8BA4\\u5220\\u9664\\uFF1F\",\n      okText: \"\\u786E\\u8BA4\",\n      cancelText: \"\\u53D6\\u6D88\",\n      onConfirm: () => deleteBook(book)\n    }, __jsx(DeleteOutlined, {\n      key: \"setting\"\n    }))]\n  }, __jsx(_Card.Meta, {\n    title: book.title,\n    description: book.summary\n  }))), [getLoading, editBook, deleteBook, toggleBookStatus]);\n  return __jsx(AdminLayout, null, __jsx(PaginationTable, _extends({\n    loading: getLoading,\n    data: books\n  }, resetPagination, {\n    refresh: refresh,\n    searchFields: SEARCH_FIELDS,\n    rightNode: __jsx(_Button, {\n      type: \"primary\",\n      onClick: toggleVisible\n    }, __jsx(PlusOutlined, null), \"\\u65B0\\u5EFA\"),\n    customDataTable: data => __jsx(_List, {\n      className: style.imgs,\n      grid: GRID,\n      dataSource: data,\n      renderItem: renderBook\n    })\n  })), __jsx(KnowledgeSettingDrawer, {\n    visible: visible,\n    toggleVisible: toggleVisible,\n    book: selectedBook,\n    onOk: refresh\n  }));\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}