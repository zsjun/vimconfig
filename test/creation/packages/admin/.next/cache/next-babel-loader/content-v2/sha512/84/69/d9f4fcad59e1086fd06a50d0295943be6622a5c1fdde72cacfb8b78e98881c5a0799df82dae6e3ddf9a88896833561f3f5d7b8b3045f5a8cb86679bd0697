{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport cls from 'classnames';\nimport { AdminLayout } from '@/layout/AdminLayout';\nimport { TagProvider } from '@/providers/tag';\nimport style from './index.module.scss';\n\nconst TagPage = ({\n  tags: defaultTags = []\n}) => {\n  const {\n    0: tags,\n    1: setTags\n  } = useState(defaultTags);\n  const {\n    0: mode,\n    1: setMode\n  } = useState('create');\n  const {\n    0: currentTag,\n    1: setCurrentTag\n  } = useState(null);\n  const {\n    0: label,\n    1: setLabel\n  } = useState(null);\n  const {\n    0: value,\n    1: setValue\n  } = useState(null);\n  const isCreateMode = useMemo(() => mode === 'create', [mode]);\n  const getTags = useCallback(() => {\n    TagProvider.getTags().then(tags => {\n      setTags(tags);\n    });\n  }, []);\n  const reset = useCallback(() => {\n    setMode('create');\n    setCurrentTag(null);\n    setLabel(null);\n    setValue(null);\n  }, []);\n  const addTag = useCallback(data => {\n    if (!data || !data.label) {\n      return;\n    }\n\n    TagProvider.addTag(data).then(() => {\n      _message.success('添加标签成功');\n\n      reset();\n      getTags();\n    });\n  }, [reset, getTags]);\n  const updateTag = useCallback((id, data) => {\n    if (!data || !data.label) {\n      return;\n    }\n\n    TagProvider.updateTag(id, data).then(() => {\n      _message.success('更新标签成功');\n\n      reset();\n      getTags();\n    });\n  }, [reset, getTags]);\n  const deleteTag = useCallback(id => {\n    TagProvider.deleteTag(id).then(() => {\n      _message.success('删除标签成功');\n\n      reset();\n      getTags();\n    });\n  }, [reset, getTags]);\n  return __jsx(AdminLayout, null, __jsx(_Row, {\n    gutter: 16,\n    className: style.wrapper\n  }, __jsx(_Col, {\n    xs: 24,\n    sm: 24,\n    md: 9\n  }, __jsx(_Card, {\n    title: isCreateMode ? '添加标签' : '管理标签',\n    bordered: true\n  }, __jsx(Form.Item, null, __jsx(_Input, {\n    value: label,\n    placeholder: '输入标签名称',\n    onChange: e => {\n      setLabel(e.target.value);\n    }\n  })), __jsx(Form.Item, null, __jsx(_Input, {\n    value: value,\n    placeholder: '输入标签值（请输入英文，作为路由使用）',\n    onChange: e => {\n      setValue(e.target.value);\n    }\n  })), __jsx(\"div\", {\n    className: cls(style.btns, isCreateMode ? false : style.isEdit)\n  }, isCreateMode ? __jsx(_Button, {\n    type: \"primary\",\n    onClick: () => addTag({\n      label,\n      value\n    })\n  }, \"\\u4FDD\\u5B58\") : __jsx(React.Fragment, null, __jsx(_Button.Group, null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: () => updateTag(currentTag.id, {\n      label,\n      value\n    })\n  }, \"\\u66F4\\u65B0\"), __jsx(_Button, {\n    type: \"dashed\",\n    onClick: () => reset()\n  }, \"\\u8FD4\\u56DE\\u6DFB\\u52A0\")), __jsx(_Popconfirm, {\n    title: \"\\u786E\\u8BA4\\u5220\\u9664\\u8FD9\\u4E2A\\u6807\\u7B7E\\uFF1F\",\n    onConfirm: () => deleteTag(currentTag.id),\n    okText: \"\\u786E\\u8BA4\",\n    cancelText: \"\\u53D6\\u6D88\"\n  }, __jsx(_Button, {\n    danger: true\n  }, \"\\u5220\\u9664\")))))), __jsx(_Col, {\n    xs: 24,\n    sm: 24,\n    md: 15\n  }, __jsx(_Card, {\n    title: \"\\u6240\\u6709\\u6807\\u7B7E\",\n    bordered: true\n  }, __jsx(\"ul\", {\n    className: style.list\n  }, tags.map(d => __jsx(\"li\", {\n    key: d.id,\n    className: cls(style.item),\n    onClick: () => {\n      setMode('edit');\n      setCurrentTag(d);\n      setLabel(d.label);\n      setValue(d.value);\n    }\n  }, __jsx(\"a\", {\n    key: d.id,\n    className: style.tag\n  }, __jsx(\"span\", null, d.label)))))))));\n};\n\nTagPage.getInitialProps = async () => {\n  const tags = await TagProvider.getTags();\n  return {\n    tags\n  };\n};\n\nexport default TagPage;","map":null,"metadata":{},"sourceType":"module"}