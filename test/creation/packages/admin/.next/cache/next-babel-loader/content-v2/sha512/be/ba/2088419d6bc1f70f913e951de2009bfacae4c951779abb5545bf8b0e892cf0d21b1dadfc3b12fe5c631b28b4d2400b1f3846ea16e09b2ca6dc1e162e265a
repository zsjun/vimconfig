{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport echarts from 'echarts';\nimport ReactEcharts from 'echarts-for-react';\nimport dateFormat from 'date-fns/format';\nimport { groupBy } from '@/utils';\nexport const ViewChart = ({\n  data: propsData = []\n}) => {\n  const formatData = propsData.map(d => {\n    return _objectSpread(_objectSpread({}, d), {}, {\n      updateAt: dateFormat(new Date(d.updateAt), 'yyyy-MM-dd')\n    });\n  });\n  const grouped = groupBy(formatData, d => d.updateAt);\n  const data = Object.keys(grouped).reduce((a, updateAt) => {\n    a.push({\n      updateAt,\n      count: grouped[updateAt].reduce((a, c) => a += c.count, 0)\n    });\n    return a;\n  }, []);\n  const option = {\n    grid: {\n      top: '3%',\n      left: '3%',\n      right: '4%',\n      bottom: '3%',\n      containLabel: true\n    },\n    tooltip: {\n      trigger: 'axis',\n\n      formatter(d) {\n        const target = d && d[0] && data[d[0].dataIndex];\n        return `日期：${target.updateAt}<br />访问量：${target.count}`;\n      }\n\n    },\n    xAxis: {\n      type: 'category',\n      boundaryGap: false,\n      data: data.map(d => d.updateAt)\n    },\n    yAxis: {\n      type: 'value',\n      boundaryGap: [0, '100%']\n    },\n    dataZoom: [{\n      type: 'inside'\n    }, {\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n      handleSize: '80%',\n      handleStyle: {\n        color: '#fff',\n        shadowBlur: 3,\n        shadowColor: 'rgba(0, 0, 0, 0.6)',\n        shadowOffsetX: 2,\n        shadowOffsetY: 2\n      }\n    }],\n    series: [{\n      type: 'line',\n      smooth: true,\n      symbol: 'none',\n      sampling: 'average',\n      itemStyle: {\n        color: 'rgb(255, 70, 131)'\n      },\n      areaStyle: {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n          offset: 0,\n          color: 'rgb(255, 158, 68)'\n        }, {\n          offset: 1,\n          color: 'rgb(255, 70, 131)'\n        }])\n      },\n      data: data.map(d => d.count)\n    }]\n  };\n  return __jsx(ReactEcharts, {\n    option: option\n  });\n};","map":null,"metadata":{},"sourceType":"module"}