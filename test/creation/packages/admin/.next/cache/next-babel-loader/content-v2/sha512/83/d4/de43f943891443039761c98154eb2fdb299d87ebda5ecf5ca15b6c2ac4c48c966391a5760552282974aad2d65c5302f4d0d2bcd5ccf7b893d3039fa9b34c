{"ast":null,"code":"import \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport _regeneratorRuntime from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"/Users/zsj/work/vimconfig/test/creation/packages/admin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { forwardRef, useRef, useEffect, useState, useCallback, useImperativeHandle } from 'react';\nimport { FileProvider } from '@/providers/file';\nimport { registerScollListener, subjectScrollListener, removeScrollListener } from './utils/syncScroll';\nexport var monaco = null;\nvar IMG_REXEXP = /^image\\/(png|jpg|jpeg|gif)$/i;\n\nvar _MonacoEditor = function _MonacoEditor(props, ref) {\n  var defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSave = props.onSave;\n  var container = useRef(null);\n  var editorRef = useRef(null);\n\n  var _useState = useState(false),\n      mounted = _useState[0],\n      setMounted = _useState[1];\n\n  var registerChange = useCallback(function () {\n    editorRef.current.onDidChangeModelContent(function () {\n      var content = editorRef.current.getValue();\n      onChange(content);\n    });\n  }, [onChange]);\n  var registerScroll = useCallback(function () {\n    editorRef.current.onDidScrollChange(registerScollListener('editor', function () {\n      var top = editorRef.current.getScrollTop() / (editorRef.current.getContentHeight() - editorRef.current.getLayoutInfo().height);\n      return {\n        id: 'editor-scroll',\n        top: top,\n        left: editorRef.current.getScrollLeft()\n      };\n    }));\n  }, []);\n  var registerSave = useCallback(function () {\n    // eslint-disable-next-line no-bitwise\n    editorRef.current.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n      onSave(editorRef.current.getValue());\n    });\n  }, [onSave]);\n  var notifyMounted = useCallback(function () {\n    window.postMessage({\n      id: 'editor-mounted'\n    }, window.location.href);\n  }, []);\n  useImperativeHandle(ref, function () {\n    return editorRef.current;\n  }, [mounted]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    Promise.all([import('monaco-editor/esm/vs/editor/editor.api.js'), import('monaco-markdown')]).then(function (res) {\n      monaco = res[0];\n      var MonacoMarkdown = res[1];\n      var editor = monaco.editor.create(container.current, {\n        language: 'markdown',\n        automaticLayout: true,\n        wordWrap: 'on',\n        theme: 'vs',\n        minimap: {\n          enabled: false\n        },\n        scrollBeyondLastLine: false,\n        scrollbar: {\n          useShadows: false,\n          vertical: 'visible',\n          horizontal: 'visible',\n          verticalScrollbarSize: 6,\n          horizontalScrollbarSize: 6\n        }\n      });\n      editorRef.current = editor;\n      var extension = new MonacoMarkdown.MonacoMarkdownExtension();\n      extension.activate(editor);\n      registerScroll();\n      registerChange();\n      registerSave();\n      notifyMounted();\n      setMounted(true);\n    });\n    return function () {\n      setMounted(false);\n      editorRef.current && editorRef.current.dispose();\n    };\n  }, [registerScroll, registerChange, registerSave, notifyMounted]);\n  useEffect(function () {\n    if (!mounted) {\n      return undefined;\n    }\n\n    var listener = function listener(_ref) {\n      var top = _ref.top,\n          left = _ref.left;\n      editorRef.current.setScrollTop(top * editorRef.current.getContentHeight());\n      editorRef.current.setScrollLeft(left);\n    };\n\n    subjectScrollListener('editor', 'preview', listener);\n    return function () {\n      removeScrollListener('preview', listener);\n    };\n  }, [mounted]);\n  useEffect(function () {\n    if (!mounted) {\n      return undefined;\n    }\n\n    var editor = editorRef.current;\n    var clearRef = {\n      current: function current() {\n        return undefined;\n      }\n    };\n    editor.onDidPaste(function (e) {\n      var pastePosition = e.range;\n      var delta = [{\n        range: new monaco.Range(pastePosition.startLineNumber, pastePosition.startColumn, pastePosition.endLineNumber, pastePosition.endColumn),\n        text: \"\"\n      }];\n\n      clearRef.current = function () {\n        editor.executeEdits('', delta);\n      };\n    });\n\n    var onPaste = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var selection, items, imgFiles, hide, upload;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                selection = editor.getSelection();\n                items = e.clipboardData.items;\n                imgFiles = Array.from(items).filter(function (item) {\n                  return item.type.match(IMG_REXEXP);\n                }).map(function (item) {\n                  return item.getAsFile();\n                });\n\n                if (imgFiles.length) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                hide = _message.loading('正在上传图片中', 0);\n\n                upload = function upload(file) {\n                  return FileProvider.uploadFile(file, 1).then(function (_ref3) {\n                    var url = _ref3.url;\n                    var delta = [{\n                      range: new monaco.Range(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn),\n                      text: \"![\".concat(file.name, \"](\").concat(url, \")\")\n                    }];\n                    editor.executeEdits('', delta);\n\n                    var _editor$getSelection = editor.getSelection(),\n                        endLineNumber = _editor$getSelection.endLineNumber,\n                        endColumn = _editor$getSelection.endColumn;\n\n                    editor.setPosition({\n                      lineNumber: endLineNumber,\n                      column: endColumn\n                    });\n                  });\n                };\n\n                _context.next = 9;\n                return Promise.all(imgFiles.map(upload));\n\n              case 9:\n                hide();\n                clearRef.current();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function onPaste(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('paste', onPaste);\n    return function () {\n      window.removeEventListener('paste', onPaste);\n    };\n  }, [mounted]);\n  useEffect(function () {\n    if (!mounted || !editorRef.current) {\n      return;\n    }\n\n    editorRef.current.setValue(defaultValue);\n  }, [mounted, defaultValue]);\n  return __jsx(\"div\", {\n    ref: container,\n    style: {\n      height: '100%',\n      overflow: 'hidden'\n    }\n  }, mounted ? null : __jsx(_Spin, {\n    tip: \"\\u7F16\\u8F91\\u5668\\u52AA\\u529B\\u52A0\\u8F7D\\u4E2D...\",\n    spinning: true\n  }));\n};\n\nexport var MonacoEditor = /*#__PURE__*/forwardRef(_MonacoEditor);","map":null,"metadata":{},"sourceType":"module"}