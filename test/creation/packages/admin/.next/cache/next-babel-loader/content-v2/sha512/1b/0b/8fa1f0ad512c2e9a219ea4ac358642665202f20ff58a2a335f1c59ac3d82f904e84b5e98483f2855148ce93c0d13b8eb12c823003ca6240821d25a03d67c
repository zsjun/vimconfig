{"ast":null,"code":"export const groupBy = function (data, condition) {\n  if (!condition || !Array.isArray(data)) {\n    return data;\n  }\n\n  const result = Object.create(null);\n  let key = null;\n  data.forEach((item, i, arr) => {\n    key = condition(item, i, arr);\n\n    if (key === null || key === undefined) {\n      return;\n    }\n\n    if (result[key]) {\n      result[key].push(item);\n    } else {\n      result[key] = [item];\n    }\n  });\n  return result;\n};\nexport const formatFileSize = size => {\n  if (size < 1024) {\n    return size + ' Byte';\n  }\n\n  if (size < 1024 * 1024) {\n    return (size / 1024).toFixed(2) + ' KB';\n  }\n\n  return (size / 1024 / 1024).toFixed(2) + ' MB';\n};\nexport function debounce(func, wait, immediate = false) {\n  let timeout;\n\n  const debounced = function () {\n    const context = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n    const args = arguments; // eslint-disable-line prefer-rest-params\n\n    const later = function () {\n      timeout = null;\n\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n\n  debounced.cancel = () => {\n    clearTimeout(timeout);\n  };\n\n  return debounced;\n}\nexport function resolveUrl(baseURL, relativeURL) {\n  if (!baseURL) {\n    baseURL = '/';\n  }\n\n  return relativeURL ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '') : baseURL;\n}\nexport const isOdd = v => v % 2 !== 0;\nexport const scrollToBottom = el => {\n  const currentScrollTop = el.scrollTop;\n  const clientHeight = el.offsetHeight;\n  const scrollHeight = el.scrollHeight;\n  el.scrollTo(0, currentScrollTop + (scrollHeight - currentScrollTop - clientHeight));\n};","map":null,"metadata":{},"sourceType":"module"}