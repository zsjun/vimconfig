{"ast":null,"code":"import \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { AdminLayout } from '@/layout/AdminLayout';\nimport { CommentProvider } from '@/providers/comment';\nimport { useAsyncLoading } from '@/hooks/useAsyncLoading';\nimport { usePagination } from '@/hooks/usePagination';\nimport { PaginationTable } from '@/components/PaginationTable';\nimport { LocaleTime } from '@/components/LocaleTime';\nimport { CommentArticle } from '@/components/comment/CommentArticle';\nimport { CommentAction } from '@/components/comment/CommentAction';\nimport { CommentContent } from '@/components/comment/CommentContent';\nimport { CommentHTML } from '@/components/comment/CommentHTML';\nimport { CommentStatus } from '@/components/comment/CommentStatus';\nlet updateLoadingMessage = null;\nconst SCROLL = {\n  x: 1440\n};\nconst SEARCH_FIELDS = [{\n  label: '称呼',\n  field: 'name',\n  msg: '请输入称呼'\n}, {\n  label: 'Email',\n  field: 'email',\n  msg: '请输入联系方式'\n}, {\n  label: '状态',\n  field: 'pass',\n  children: __jsx(_Select, {\n    style: {\n      width: 180\n    }\n  }, [{\n    label: '已通过',\n    value: 1\n  }, {\n    label: '未通过',\n    value: 0\n  }].map(t => {\n    return __jsx(_Select.Option, {\n      key: t.label,\n      value: t.value\n    }, t.label);\n  }))\n}];\nconst COMMON_COLUMNS = [{\n  title: '状态',\n  dataIndex: 'pass',\n  key: 'pass',\n  fixed: 'left',\n  width: 100,\n  render: (_, record) => __jsx(CommentStatus, {\n    comment: record\n  })\n}, {\n  title: '称呼',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '联系方式',\n  dataIndex: 'email',\n  key: 'email'\n}, {\n  title: '原始内容',\n  dataIndex: 'content',\n  key: 'content',\n  width: 160,\n  render: (_, record) => __jsx(CommentContent, {\n    comment: record\n  })\n}, {\n  title: 'HTML 内容',\n  dataIndex: 'html',\n  key: 'html',\n  width: 160,\n  render: (_, record) => __jsx(CommentHTML, {\n    comment: record\n  })\n}, {\n  title: '管理文章',\n  dataIndex: 'url',\n  key: 'url',\n  width: 100,\n  render: (_, record) => {\n    return __jsx(CommentArticle, {\n      comment: record\n    });\n  }\n}, {\n  title: '创建时间',\n  dataIndex: 'createAt',\n  key: 'createAt',\n  width: 200,\n  render: date => __jsx(LocaleTime, {\n    date: date\n  })\n}];\n\nconst Comment = () => {\n  const _usePagination = usePagination(CommentProvider.getComments),\n        {\n    loading,\n    data: comments,\n    refresh\n  } = _usePagination,\n        resetPagination = _objectWithoutProperties(_usePagination, [\"loading\", \"data\", \"refresh\"]);\n\n  const [updateApi, updateLoading] = useAsyncLoading(CommentProvider.updateComment);\n  const [deleteApi, deleteLoading] = useAsyncLoading(CommentProvider.deleteComment);\n  const updateAction = useCallback((articles, key, value = null) => {\n    if (!Array.isArray(articles)) {\n      articles = [articles];\n    }\n\n    return () => Promise.all(articles.map(article => updateApi(article.id, {\n      [key]: value !== null ? value : !article[key]\n    }))).then(() => {\n      _message.success('操作成功');\n\n      refresh();\n    });\n  }, [updateApi, refresh]);\n  const deleteAction = useCallback((ids, resetSelectedRows = null) => {\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    return () => {\n      Promise.all(ids.map(id => deleteApi(id))).then(() => {\n        _message.success('操作成功');\n\n        resetSelectedRows && resetSelectedRows();\n        refresh();\n      });\n    };\n  }, [deleteApi, refresh]);\n  const parentCommentColumn = useMemo(() => ({\n    title: '父级评论',\n    dataIndex: 'parentCommentId',\n    key: 'parentCommentId',\n    width: 100,\n    render: id => {\n      const target = comments.find(c => c.id === id);\n      return target && target.name || '无';\n    }\n  }), [comments]);\n  const actionColumn = useCallback(resetSelectedRows => ({\n    title: '操作',\n    key: 'action',\n    fixed: 'right',\n    render: (_, record) => __jsx(CommentAction, {\n      comment: record,\n      refresh: () => {\n        resetSelectedRows();\n        refresh();\n      }\n    })\n  }), [refresh]);\n  useEffect(() => {\n    if (updateLoading) {\n      updateLoadingMessage = _message.loading('操作中...', 0);\n    } else {\n      updateLoadingMessage && updateLoadingMessage();\n    }\n  }, [updateLoading]);\n  return __jsx(AdminLayout, null, __jsx(PaginationTable, _extends({\n    showSelection: true,\n    loading: loading,\n    data: comments,\n    columns: resetSelectedRows => [...COMMON_COLUMNS, parentCommentColumn, actionColumn(resetSelectedRows)],\n    refresh: refresh\n  }, resetPagination, {\n    renderLeftNode: ({\n      hasSelected,\n      selectedRowKeys,\n      selectedRows,\n      resetSelectedRows\n    }) => hasSelected ? __jsx(React.Fragment, null, __jsx(_Button, {\n      disabled: !hasSelected,\n      style: {\n        marginRight: 8\n      },\n      onClick: updateAction(selectedRows, 'pass', true)\n    }, \"\\u901A\\u8FC7\"), __jsx(_Button, {\n      disabled: !hasSelected,\n      style: {\n        marginRight: 8\n      },\n      onClick: updateAction(selectedRows, 'status', false)\n    }, \"\\u62D2\\u7EDD\"), __jsx(_Popconfirm, {\n      title: \"\\u786E\\u8BA4\\u5220\\u9664\\uFF1F\",\n      onConfirm: deleteAction(selectedRowKeys, resetSelectedRows),\n      okText: \"\\u786E\\u8BA4\",\n      cancelText: \"\\u53D6\\u6D88\"\n    }, __jsx(_Button, {\n      disabled: !hasSelected,\n      loading: deleteLoading,\n      danger: true\n    }, \"\\u5220\\u9664\"))) : null,\n    scroll: SCROLL,\n    searchFields: SEARCH_FIELDS\n  })));\n};\n\nexport default Comment;","map":null,"metadata":{},"sourceType":"module"}