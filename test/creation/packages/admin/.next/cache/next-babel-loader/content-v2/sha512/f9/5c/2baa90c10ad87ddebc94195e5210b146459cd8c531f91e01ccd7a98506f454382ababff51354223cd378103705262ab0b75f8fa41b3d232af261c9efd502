{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAsyncLoading } from './useAsyncLoading';\nexport const usePagination = (fetch, options) => {\n  const {\n    page: defaultPage,\n    pageSize: defaultPageSize,\n    params: defaultParams,\n    after\n  } = _objectSpread({\n    page: 1,\n    pageSize: 12,\n    params: {}\n  }, options || {});\n\n  const [api, loading] = useAsyncLoading(fetch);\n  const {\n    0: page,\n    1: setPage\n  } = useState(defaultPage);\n  const {\n    0: pageSize,\n    1: setPageSize\n  } = useState(defaultPageSize);\n  const {\n    0: params,\n    1: setParams\n  } = useState(defaultParams);\n  const {\n    0: total,\n    1: setTotal\n  } = useState(0);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const callAfter = useCallback(() => {\n    after && after({\n      page,\n      pageSize,\n      data,\n      total,\n      loading\n    });\n  }, [after, page, pageSize, data, total, loading]);\n  const query = useCallback((...args) => {\n    return api(...args).then(res => {\n      setData(res[0]);\n      setTotal(res[1]);\n      callAfter();\n      return res;\n    });\n  }, [api, callAfter]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const refresh = useCallback(() => query(_objectSpread({\n    page,\n    pageSize\n  }, params)), [page, pageSize, params]);\n  const reset = useCallback(() => {\n    setPage(defaultPage);\n    setPageSize(defaultPageSize);\n    setParams(defaultParams);\n  }, [defaultPage, defaultPageSize, defaultParams]);\n  useEffect(() => {\n    query(_objectSpread({\n      page,\n      pageSize\n    }, params)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page, pageSize, params]);\n  return {\n    loading,\n    data,\n    total,\n    page,\n    pageSize,\n    params,\n    setPage,\n    setPageSize,\n    setParams,\n    refresh,\n    reset\n  };\n};","map":null,"metadata":{},"sourceType":"module"}