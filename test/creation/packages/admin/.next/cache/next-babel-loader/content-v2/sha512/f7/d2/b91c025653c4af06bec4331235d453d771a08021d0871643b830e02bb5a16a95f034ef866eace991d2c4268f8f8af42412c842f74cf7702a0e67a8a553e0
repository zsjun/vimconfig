{"ast":null,"code":"import \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/popover/style\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useRef, useState } from 'react';\nimport { default as Router } from 'next/router';\nimport cls from 'classnames';\nimport { CloseOutlined, DeleteOutlined, PlusOutlined, MenuOutlined, SettingOutlined } from '@ant-design/icons';\nimport { SortableHandle, SortableContainer, SortableElement } from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport { KnowledgeProvider } from '@/providers/knowledge';\nimport { Editor } from '@/components/Editor';\nimport { KnowledgeSettingDrawer } from '@/components/KnowledgeSettingDrawer';\nimport { useForceUpdate } from '@/hooks/useForceUpdate';\nimport { useToggle } from '@/hooks/useToggle';\nimport styles from './index.module.scss';\nimport { scrollToBottom } from '@/utils';\nconst DragHandle = SortableHandle(() => __jsx(\"span\", {\n  style: {\n    cursor: 'move'\n  }\n}, __jsx(MenuOutlined, null)));\n\nconst Page = ({\n  id,\n  knowledge: defaultKnowledge\n}) => {\n  const forceUpdate = useForceUpdate();\n  const $container = useRef();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [popVisible, togglePopVisible] = useToggle(false);\n  const [settingVisible, toggleSettingVisible] = useToggle(false);\n  const {\n    0: knowledge,\n    1: setKnowledge\n  } = useState(defaultKnowledge);\n  const {\n    0: newTitle,\n    1: setNewTitle\n  } = useState('');\n  const {\n    0: currentIndex,\n    1: setCurrentIndex\n  } = useState(-1);\n  const {\n    0: chapters,\n    1: setChapters\n  } = useState(knowledge.children || []);\n  const currentChapter = chapters[currentIndex] || null;\n  const deleteKnowledge = useCallback(idx => {\n    const handle = () => {\n      setChapters(chapters => {\n        chapters.splice(idx, 1);\n        return chapters;\n      });\n      forceUpdate();\n      setCurrentIndex(currentIndex - 1);\n    };\n\n    const target = chapters[idx];\n\n    if (target.id) {\n      KnowledgeProvider.deleteKnowledge(target.id).then(() => {\n        handle();\n\n        _message.success('已保存');\n      });\n    } else {\n      handle();\n    }\n  }, [chapters, currentIndex, forceUpdate]);\n  const SortableItem = SortableElement(({\n    value: idx\n  }) => __jsx(\"div\", {\n    key: idx,\n    className: cls({\n      'active': idx === currentIndex,\n      'knowledge-chapter-item': true\n    }),\n    onClick: () => setCurrentIndex(idx)\n  }, __jsx(DragHandle, null), __jsx(\"span\", null, chapters[idx].title), __jsx(_Popconfirm, {\n    title: \"\\u786E\\u8BA4\\u5220\\u9664?\",\n    onConfirm: () => deleteKnowledge(idx),\n    okText: \"\\u786E\\u5B9A\",\n    cancelText: \"\\u53D6\\u6D88\"\n  }, __jsx(DeleteOutlined, {\n    onClick: e => e.stopPropagation()\n  }))));\n  const SortableList = SortableContainer(({\n    items\n  }) => {\n    return __jsx(\"div\", {\n      className: styles.menu\n    }, items.map((item, index) => __jsx(SortableItem, {\n      key: `item-${item.title}`,\n      index: index,\n      value: index\n    })));\n  });\n  const onSortEnd = useCallback(({\n    oldIndex,\n    newIndex\n  }) => {\n    if (currentIndex > -1) {\n      setCurrentIndex(newIndex);\n    }\n\n    setChapters(chapters => {\n      return arrayMove(chapters, oldIndex, newIndex);\n    });\n  }, [currentIndex]);\n  const createNewKnowledge = useCallback(() => {\n    const title = newTitle.trim();\n\n    if (!title) {\n      return;\n    }\n\n    setChapters(chapters => {\n      chapters.push({\n        title: title,\n        content: ''\n      });\n      return chapters;\n    });\n    setCurrentIndex(chapters.length - 1);\n    setNewTitle('');\n    togglePopVisible();\n    forceUpdate();\n    Promise.resolve().then(() => scrollToBottom($container.current));\n  }, [newTitle, chapters, forceUpdate, togglePopVisible]);\n  const patchKnowledge = useCallback(patch => {\n    if (currentIndex < 0) {\n      return;\n    }\n\n    setChapters(chapters => {\n      const target = chapters[currentIndex];\n\n      if (!target) {\n        return chapters;\n      }\n\n      target.content = patch.value;\n      target.html = patch.html;\n      target.toc = patch.toc;\n      return chapters;\n    });\n  }, [currentIndex]);\n  const save = useCallback(() => {\n    if (!chapters || !chapters.length) {\n      return;\n    }\n\n    chapters.forEach((chapter, idx) => {\n      chapter.order = idx;\n    });\n    setLoading(true);\n    const promises = chapters.map(chapter => {\n      if (chapter.parentId) {\n        return KnowledgeProvider.updateKnowledge(chapter.id, chapter);\n      }\n\n      return KnowledgeProvider.createChapters([_objectSpread(_objectSpread({}, chapter), {}, {\n        parentId: id\n      })]);\n    }); // eslint-disable-next-line consistent-return\n\n    return Promise.all(promises).then(res => {\n      const data = res.flat(Infinity);\n      setLoading(false);\n      setChapters(data);\n      forceUpdate();\n\n      _message.success('已保存');\n    });\n  }, [id, chapters, forceUpdate]);\n  return __jsx(\"div\", {\n    className: styles.wrapper\n  }, __jsx(\"aside\", null, __jsx(\"header\", null, __jsx(\"div\", null, __jsx(_Popconfirm, {\n    title: \"\\u786E\\u8BA4\\u5173\\u95ED\\uFF1F\\u5982\\u679C\\u6709\\u5185\\u5BB9\\u53D8\\u66F4\\uFF0C\\u8BF7\\u5148\\u4FDD\\u5B58\\u3002\",\n    onConfirm: () => Router.push('/knowledge'),\n    onCancel: () => null,\n    okText: \"\\u786E\\u8BA4\",\n    cancelText: \"\\u53D6\\u6D88\",\n    placement: \"rightBottom\",\n    okButtonProps: {\n      loading\n    }\n  }, __jsx(CloseOutlined, null)), __jsx(\"div\", null, __jsx(_Avatar, {\n    shape: \"square\",\n    src: knowledge.cover\n  }), __jsx(\"span\", {\n    style: {\n      marginLeft: 8\n    }\n  }, knowledge.title)), __jsx(SettingOutlined, {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: toggleSettingVisible\n  }), __jsx(KnowledgeSettingDrawer, {\n    visible: settingVisible,\n    toggleVisible: toggleSettingVisible,\n    book: knowledge,\n    onOk: setKnowledge\n  })), __jsx(\"div\", null, __jsx(_Button, {\n    style: {\n      width: '100%'\n    },\n    onClick: save,\n    loading: loading\n  }, \"\\u4FDD\\u5B58\")), __jsx(\"div\", null, __jsx(\"span\", null, chapters.length, \"\\u7BC7\\u6587\\u7AE0\"), __jsx(_Popover, {\n    content: __jsx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, __jsx(_Input, {\n      autoFocus: true,\n      width: 240,\n      value: newTitle,\n      onChange: e => setNewTitle(e.target.value)\n    }), __jsx(_Button, {\n      style: {\n        marginLeft: 8\n      },\n      type: \"primary\",\n      onClick: createNewKnowledge\n    }, \"\\u65B0\\u5EFA\")),\n    visible: popVisible,\n    onVisibleChange: togglePopVisible,\n    placement: \"rightTop\",\n    trigger: \"click\"\n  }, __jsx(_Button, {\n    icon: __jsx(PlusOutlined, null),\n    size: \"small\"\n  }, \"\\u65B0\\u5EFA\"))), __jsx(_Divider, {\n    style: {\n      margin: '16px 0'\n    }\n  })), __jsx(\"main\", {\n    ref: $container\n  }, __jsx(SortableList, {\n    items: chapters,\n    onSortEnd: onSortEnd,\n    useDragHandle: true,\n    lockAxis: 'y'\n  }))), __jsx(\"main\", null, currentChapter ? __jsx(Editor, {\n    defaultValue: currentChapter && currentChapter.content || '',\n    onChange: patchKnowledge\n  }) : __jsx(\"div\", {\n    className: styles.helper\n  }, \"\\u8BF7\\u65B0\\u5EFA\\u7AE0\\u8282\\uFF08\\u6216\\u8005\\u9009\\u62E9\\u7AE0\\u8282\\u8FDB\\u884C\\u7F16\\u8F91\\uFF09\")));\n};\n\nPage.getInitialProps = async ctx => {\n  const {\n    id\n  } = ctx.query;\n  const knowledge = await KnowledgeProvider.getKnowledge(id);\n  return {\n    id,\n    knowledge\n  };\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}